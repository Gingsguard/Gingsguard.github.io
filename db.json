{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/avatar.ico","path":"assets/avatar.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/avatar.ico","path":"avatar/avatar.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"source/images/analysis.png","path":"images/analysis.png","modified":1,"renderable":0},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"410b304b32c44ae1ff89907d25f2419da49821e7","modified":1569309314833},{"_id":"source/baidu_verify_iTpjHARw1a.html","hash":"dbb8acc3ea9afa24a3690a64028b958be3650ac9","modified":1569309315126},{"_id":"source/baidu_verify_iTpjHARw1a.html~","hash":"dbb8acc3ea9afa24a3690a64028b958be3650ac9","modified":1569309315130},{"_id":"source/google079cab7937988898.html","hash":"1f137c491c2181975567efb3956eafdf24d6c1e9","modified":1569309315143},{"_id":"source/google079cab7937988898.html~","hash":"1f137c491c2181975567efb3956eafdf24d6c1e9","modified":1569309315147},{"_id":"source/robots.txt","hash":"a9dd1e5708155510a0f83feed52f5aff10161f93","modified":1569309315161},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"c9ddda90c025c449ef182b368c719de5fe3ea61e","modified":1569321450717},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1553725894000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"source/_posts/.DS_Store","hash":"cf90243528929e7b9719a4d60437a08045bd8ebb","modified":1569309314836},{"_id":"source/_posts/Hello-World-0.md","hash":"ff42b9e149889d575cdb136890c1e236fcdc77a8","modified":1569309314838},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It.md","hash":"fc5040d6e079e4af8278fe6a7688e837a2c3b5f5","modified":1569309314848},{"_id":"source/_posts/WordPress-Social-Warfare-Rce.md","hash":"c9aa768c6147aa5ea3104b343339ccf9ff0c4e15","modified":1569320951007},{"_id":"source/_posts/diango.md","hash":"907dc6f84c30557ab099745c81b9df4ce00b8f3c","modified":1569318399898},{"_id":"source/_posts/hexohelp.md","hash":"c707115db7ee28ce4cf6307350e85dd3aa108859","modified":1569309314945},{"_id":"source/_posts/kris.md","hash":"c1021ebaba43f077a059993ee555a01f9a13ce79","modified":1569309314967},{"_id":"source/_posts/ukiyoe.md","hash":"217b3ade3544bdea1952a93f312bd97fd87d80b0","modified":1569309315080},{"_id":"source/about/index.md","hash":"c2f41bfe6ca9c0a8ad0345597e47b1260121a5f9","modified":1569321371084},{"_id":"source/about/index.md~","hash":"f6e132a2aac0cdbc5e5f271f2c38348ab29f1932","modified":1569309315118},{"_id":"source/images/avatar.jpg","hash":"625ef30fcb8890b9955bd07346ce1c8081cf47a9","modified":1569309315158},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1553725894000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1553725894000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1553725894000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1553725894000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1553725894000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1553725894000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1553725894000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1553725894000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1553725894000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1553725894000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1553725894000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1553725894000},{"_id":"source/_posts/Hello-World-0/.DS_Store","hash":"2ecbb533b75d86bf816d8b12771a14062a036032","modified":1569309314843},{"_id":"source/_posts/Hello-World-0/helloworld.jpeg","hash":"419dede67985440a37fa1206e660e6a189b5cce6","modified":1569309314845},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/.DS_Store","hash":"532a845026810dcf7f676681dc8c70d7484dc5a1","modified":1569309314850},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/2.jpg","hash":"ee5b0684047c49d65b975dca06650731f96baed5","modified":1569309314871},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/1.jpg","hash":"a0a22b0bed0203a421b98c812422317ade64ba17","modified":1569309314869},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/3.jpg","hash":"aef93b95777bf79653321d3295fd99e972e23713","modified":1569309314894},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/4.jpg","hash":"0778cec2f67f35667788edd62f69e25742d72307","modified":1569309314897},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/5.jpg","hash":"f97c41330b80757db73df528aaf20a5a96edca62","modified":1569309314899},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/6.jpg","hash":"a352f66d5aa63f2545411969fcb8ab98e8f04adc","modified":1569309314901},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/7.jpg","hash":"180547d30d43aa9351a0fb23f0890383fff17455","modified":1569309314904},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/8.jpg","hash":"ef3bc7971ca0c517aeae241add6b0a09adeaeb9d","modified":1569309314906},{"_id":"source/_posts/diango/0.jpg","hash":"886de59150245ff0c3a670306546ad6aa6fa0172","modified":1569309314913},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/9.jpg","hash":"a352f66d5aa63f2545411969fcb8ab98e8f04adc","modified":1569309314909},{"_id":"source/_posts/diango/1.jpg","hash":"941f757db5964b200793a9cc3511b41f2c82a677","modified":1569309314915},{"_id":"source/_posts/diango/2.jpg","hash":"b7227daa2e7f2930f2e31cbd48185b9bc135b20f","modified":1569309314917},{"_id":"source/_posts/diango/4.jpg","hash":"e92889b20b84a62d9c8a05bc41b4f2ce36051063","modified":1569309314923},{"_id":"source/_posts/diango/5.jpg","hash":"953b3988a50312705e744005076ec062e81be863","modified":1569309314940},{"_id":"source/_posts/diango/6.jpg","hash":"864ce9994c17313fd57bf66c156e7d79063949a1","modified":1569309314942},{"_id":"source/_posts/hexohelp/.DS_Store","hash":"857449d01c022a1e32fd8e895d0e4c1766cff309","modified":1569309314947},{"_id":"source/_posts/hexohelp/0.jpeg","hash":"50504c8d166937a2fcaecbad4c88371778f4e57c","modified":1569309314949},{"_id":"source/_posts/kris/.DS_Store","hash":"eb1dc1527a170917b38b35a7a831bb1c5fcd4fd0","modified":1569309314970},{"_id":"source/_posts/kris/5.jpg","hash":"b35754a09db269bea8bb8d566cc0d8e81bea7a94","modified":1569309315065},{"_id":"source/_posts/ukiyoe/.DS_Store","hash":"0242d3891cac26aa30c57efa05c1063b02b52121","modified":1569309315083},{"_id":"source/_posts/ukiyoe/3.jpeg","hash":"86c44a07f6b1610d9505784fe96f1b8a0b1234da","modified":1569309315111},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1553725894000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1553725894000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1553725894000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1553725894000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1553725894000},{"_id":"themes/archer/source/assets/avatar.ico","hash":"6d9446180107ee43558121e090631d906d0d1929","modified":1569319793418},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1553725894000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1553725894000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1553725894000},{"_id":"themes/archer/source/avatar/avatar.ico","hash":"6d9446180107ee43558121e090631d906d0d1929","modified":1569319793418},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1553725894000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1553725894000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1553725894000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1553725894000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1553725894000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1553725894000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1553725894000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1553725894000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1553725894000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1553725894000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1553725894000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1553725894000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1553725894000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1553725894000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1553725894000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1553725894000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1553725894000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1553725894000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1553725894000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1553725894000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1553725894000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1553725894000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1553725894000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1553725894000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1553725894000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1553725894000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1553725894000},{"_id":"source/_posts/WordPress-Social-Warfare-Rce/1.png","hash":"92500dce0fd0403bf9f3d836e169dfd39898fc27","modified":1569318962945},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/0.png","hash":"5412e09b328382f3907dccc7e666023a5fe28b3e","modified":1569309314853},{"_id":"source/_posts/hexohelp/2.png","hash":"2eac2ae1fe1c8e477af477c520243999c13bfba5","modified":1569309314955},{"_id":"source/_posts/hexohelp/3.png","hash":"95d46f1154f2daa6fa23e8342590c86e9e4f97ad","modified":1569309314965},{"_id":"source/_posts/kris/0.jpg","hash":"14ed47508a92efb6c865b72a88436b376657e4f4","modified":1569309314973},{"_id":"source/_posts/kris/10.jpg","hash":"0c04b1737ecad67de97f5510d9fccca0bac4373e","modified":1569309314979},{"_id":"source/_posts/kris/8.jpg","hash":"8e72bd41a4dddd1672490e31be03a433a4a80854","modified":1569309315075},{"_id":"source/_posts/ukiyoe/1.jpeg","hash":"b059121b83019ce3a074d22fa3b449dfaad798f9","modified":1569309315088},{"_id":"source/_posts/ukiyoe/2.jpg","hash":"46de83fa5a712ca06a50af2b1b4f7c35f0315db9","modified":1569309315092},{"_id":"source/_posts/ukiyoe/4.jpg","hash":"f63d3fb821004b1a788cde140504585dc6cda6de","modified":1569309315114},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553725894000},{"_id":"themes/archer/source/avatar/avatar.jpg","hash":"ae281249bcd8ca4d52b772ce5e5662cb6d7e643d","modified":1569319447894},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1553725894000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1553725894000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1553725894000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1553725894000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1553725894000},{"_id":"source/_posts/diango/3.jpg","hash":"22915b5ed1c2f3b9fd4f26d0bed575d047750a12","modified":1569309314921},{"_id":"source/_posts/kris/11.jpg","hash":"386a585aeb483e0a26835924e58ebe93549df9b5","modified":1569309314994},{"_id":"source/_posts/kris/2.jpg","hash":"7e1bae4d9803bc540e400bec5760683deae289b3","modified":1569309314996},{"_id":"source/_posts/kris/3.jpg","hash":"7378eefe56af50bf22fd76948f07c1576dccc0f5","modified":1569309315060},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1553725894000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1553725894000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1553725894000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1553725894000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1553725894000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1553725894000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1553725894000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1553725894000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1553725894000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1553725894000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1553725894000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1553725894000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1553725894000},{"_id":"source/_posts/ukiyoe/0.jpg","hash":"3d657827bd2e69a0ca143a7ed124d9cd1c2af7de","modified":1569309315086},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1553725894000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1553725894000},{"_id":"source/_posts/kris/4.jpg","hash":"779d636e11de09077e34c10eacc9b594092593a8","modified":1569309315063},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1553725894000},{"_id":"source/_posts/kris/1.jpg","hash":"39f0a611e54039da42f2814bee40f8215338c3b6","modified":1569309314976},{"_id":"source/_posts/kris/9.jpg","hash":"19143665e641c074031c22b752b13bb2351a9079","modified":1569309315078},{"_id":"source/_posts/hexohelp/1.png","hash":"4d6662531e1cf010bbddf99768476ada745d1188","modified":1569309314952},{"_id":"source/_posts/kris/7.jpg","hash":"7e0200ec63c12df4b953a1000a797adc8a7453c8","modified":1569309315072},{"_id":"source/images/analysis.png","hash":"3887ae7680db2ea8330d642c19f4e08c47acb4d6","modified":1569309315154},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1553725894000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1553725894000},{"_id":"source/_posts/kris/6.jpg","hash":"826b7306b3145ad4f7033eba8e22698d85226fda","modified":1569309315069}],"Category":[{"name":"日常","_id":"ck0xq7agm0004kwa96msgv090"},{"name":"技术","_id":"ck0xq7agv0009kwa99fe3uvvq"}],"Data":[],"Page":[{"layout":"false","sitemap":false,"_content":"iTpjHARw1a\n\n","source":"baidu_verify_iTpjHARw1a.html","raw":"layout: false\nsitemap: false\n---\niTpjHARw1a\n\n","date":"2019-09-24T07:15:15.126Z","updated":"2019-09-24T07:15:15.126Z","path":"baidu_verify_iTpjHARw1a.html","title":"","comments":1,"_id":"ck0xq7af10000kwa94rlkv3ei","content":"iTpjHARw1a\n\n","site":{"data":{}},"excerpt":"","more":"iTpjHARw1a\n\n"},{"layout":"false","sitemap":false,"_content":"google-site-verification: google079cab7937988898.html\n","source":"google079cab7937988898.html","raw":"layout: false\nsitemap: false\n---\ngoogle-site-verification: google079cab7937988898.html\n","date":"2019-09-24T07:15:15.143Z","updated":"2019-09-24T07:15:15.143Z","path":"google079cab7937988898.html","title":"","comments":1,"_id":"ck0xq7af40001kwa99ixkmi6j","content":"google-site-verification: google079cab7937988898.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: google079cab7937988898.html\n"},{"title":"about","date":"2017-05-17T16:17:31.000Z","_content":"\n\n原绿盟伏影实验室 web安全研究员，现天融信阿尔法实验室 web高级安全研究员\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-18 00:17:31\n---\n\n\n原绿盟伏影实验室 web安全研究员，现天融信阿尔法实验室 web高级安全研究员\n","updated":"2019-09-24T10:36:11.084Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck0xq7aij000skwa9n5j95rwz","content":"<p>原绿盟伏影实验室 web安全研究员，现天融信阿尔法实验室 web高级安全研究员</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原绿盟伏影实验室 web安全研究员，现天融信阿尔法实验室 web高级安全研究员</p>\n"}],"Post":[{"title":"早安！世界","date":"2017-05-17T14:22:36.000Z","_content":"一直以来想搭建一个自己的网站，然而又<font color=#FF7F50>不想花钱</font>。。。\n在寻找免费服务器的路上磕磕绊绊的，被国内外打着免费旗号的服务器坑的生活不能自理。\n猛地发现github上可以托管静态网站！！！效果还这么惊艳！！！\n顿时感慨自己没文化真可怕。。。\n总之，我的Blog杂货铺今天开张啦，按照惯例，向全世界问候一声~\n<div align=\"center\">\n{% asset_img helloworld.jpeg%}\n</div>\n","source":"_posts/Hello-World-0.md","raw":"---\ntitle: 早安！世界\ndate: 2017-05-17 22:22:36\ncategories: 日常\ntags: 杂文\n---\n一直以来想搭建一个自己的网站，然而又<font color=#FF7F50>不想花钱</font>。。。\n在寻找免费服务器的路上磕磕绊绊的，被国内外打着免费旗号的服务器坑的生活不能自理。\n猛地发现github上可以托管静态网站！！！效果还这么惊艳！！！\n顿时感慨自己没文化真可怕。。。\n总之，我的Blog杂货铺今天开张啦，按照惯例，向全世界问候一声~\n<div align=\"center\">\n{% asset_img helloworld.jpeg%}\n</div>\n","slug":"Hello-World-0","published":1,"updated":"2019-09-24T07:15:14.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7ag70002kwa948lyytw0","content":"<p>一直以来想搭建一个自己的网站，然而又<font color=\"#FF7F50\">不想花钱</font>。。。<br>在寻找免费服务器的路上磕磕绊绊的，被国内外打着免费旗号的服务器坑的生活不能自理。<br>猛地发现github上可以托管静态网站！！！效果还这么惊艳！！！<br>顿时感慨自己没文化真可怕。。。<br>总之，我的Blog杂货铺今天开张啦，按照惯例，向全世界问候一声~</p>\n<div align=\"center\"><br><img src=\"/Hello-World-0/helloworld.jpeg\"><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p>一直以来想搭建一个自己的网站，然而又<font color=\"#FF7F50\">不想花钱</font>。。。<br>在寻找免费服务器的路上磕磕绊绊的，被国内外打着免费旗号的服务器坑的生活不能自理。<br>猛地发现github上可以托管静态网站！！！效果还这么惊艳！！！<br>顿时感慨自己没文化真可怕。。。<br>总之，我的Blog杂货铺今天开张啦，按照惯例，向全世界问候一声~</p>\n<div align=\"center\"><br><img src=\"/Hello-World-0/helloworld.jpeg\"><br></div>\n"},{"title":"WordPress-Social-Warfare远程代码执行漏洞分析","date":"2019-09-24T09:49:58.000Z","_content":"\n------\n\n<div align=\"center\">{% asset_img 1.png%}</div>\n\nsocial-warfare是一款 WordPress社交分享按钮插件。 该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量\n\nsocial-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞\n\n<!--more-->\n\n# 背景介绍\n\nsocial-warfare是一款 WordPress社交分享按钮插件。 不同于大多数WordPress社交分享插件，social-warfar最大的优势在于其轻便性与高效性。它不会像其他共享插件一样减慢网站速度，这也是很多用户使用其作为自己网站社交分享插件的原因。\n\n该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9cab96ac7dc5a8c199faa4cea800d35b.png)\n\n## 漏洞描述\n\nsocial-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞。\n\n攻击成功的条件只需要如下两条：\n\n只要符合以上两个条件，无需复杂的payload构造，即可通过简简单单的一个get请求，远程执行任意代码。\n与wordpress自身漏洞修补不同，对于插件的漏洞，wordpress并不会在后台对该插件进行自动升级，仅仅是提示有新版本可用。\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f09cfb9a4bf7ca3a89624bbdab4ece3a.png)\n\n简言之，由于该机制的存在，目前还有大部分使用该插件的站长，所使用着仍存在漏洞版本的social-warfare插件，面临着被攻击的风险。\n\n与此同时，这个漏洞，还是一个洞中洞，开发者的一连串失误，将该漏洞威胁等级逐步增高。\n\n&nbsp;\n\n## 受影响的系统版本\n\nsocial-warfare&lt;= 3.5.2\n\n&nbsp;\n\n## 漏洞编号\n\nCVE-2019-9978\n\n&nbsp;\n\n# 漏洞细节\n\nsocial-warfare安装后如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/6cea63341fcc7d1afae9189460553fb4.png)\n\n如图中红框所见，该插件提供了一个简洁易用的分享功能栏。\n\n首先，通过github的commit记录，找到漏洞触发点\n\n漏洞触发点位于/wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php中的debug_parameters方法中\n\n首先分析下debug_parameters方法\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a7ba07b0bc7379abc39d0dc734bef4d.png)\n\n该方法提供了一种允许更容易调试数据库迁移功能的方法。\n\n先来看下get_user_options功能的代码块\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/4e04fc9b7265e54c0e15a3635fc5874b.png)\n\n此处功能模块加载wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php 中initialize_database方法中的$defaults数组中的配置信息，如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/19b94966c0e303f8164286461e0338e2.png)\n\n在访问与执行该功能模块后，返回相应的配置信息\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/fcd76e490cc82b1d1ca222c7fc4727b7.png)\n\n接下来分析漏洞触发点 位于如下图中的if分支中\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/34a240e81557704f1c9745d6080e23ad.png)\n\n也就是在’load_options’这个功能模块中。该功能模块，是开发者用来调试数据库迁移功能的，在对用户实现实际的业务功能中，该模块并没有被使用过。\n\n逐行分析下此功能模块 首先，可以看到如下图代码块:\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png)\n\n如红框中所见，这里的代码看起来，需要通过is_admin()方法的校验。看起来，这里需要有admin权限才可以执行后续代码触发漏洞。按照以往经验，这是一个需要后台权限才可以代码执行的漏洞（但这里的推测并不正确，具体的见下文分析）\n\n紧接着，通过file_get_contents方法，发送请求\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/17cbe28ee96c48c8baab35742002bf3d.png)\n\n其中的$_GET[‘swp_url’]我们可控，例如：\n\nhttp://127.0.0\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0594cb2ffa6f8a291c0ba8d41e1e5668.png)\n\n这样file_get_contents会访问 http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量 到此为止，我们通过构造链接传入file_get_contents，达到完全可控$options变量中的内容的目的\n\n接下来，会从$options变量中提取出内容，并进行解析，如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/bded25e5da4ccfa0f16d614b52548839.png)\n\n随后，将解析出的$options值拼接后赋予$array，如使用我们案例中的1.php,那么$array的值为：return phpinfo()\n\n接下来，$array中的值会传递入eval中，造成代码执行\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/dd061c81db5e40245e4458ff5f8bc8ba.png)\n\n实际效果如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/66a4b42781354e24b2cde9e630f51bb1.png)\n\n漏洞分析到此结束，本次漏洞影响很大，但漏洞自身没有什么亮点\n\n接下来，看一下官方是如何修补的：\n\n通过github的commit记录，获取此次的修补方案。\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/a134e944bfa46ae34edb4d687d33f597.png)\n\n此次修补，将lib/utilities/SWP_Database_Migration.php中的221-284行，将debug_parameters方法中存在问题的load_options模块代码全部删除 所以不存在绕过补丁的可能性。\n\n在分析此漏洞时，有几处有意思的地方，和大家分享一下：\n\n### 思考一：\n\n先来看下如下操作：\n\n首先，我们退出wordpress登陆\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0dba144a1bc952bc4cda36f0cce39b6c.png)\n\n可见，此时我们并没有登陆，也没有admin权限\n\n接着，我们访问poc\n\nhttp://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/650252922e64b757e1d7c89b063cc305.png)\n\npayload仍然可以触发\n\n回顾上文此处\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png)\n\n在漏洞分析环节，我们的猜测是，由于is_admin方法的校验，此处应该是后台漏洞，但是在没有登陆的情况下，仍然触发了。\n\n这是为什么呢？\n\n原因如下： 先来看看is_admin方法是如何实现的\n\n位于/wp-includes/load.php中\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/de06cb5281ce8f86eff50fab3c185a22.png)\n\n可以看到，有一个if-elseif判断\n\n在elseif中判断defined (‘WP_ADMIN’)的值\n\n由于我们构造的payload，入口是admin-post.php\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0fed2e5c53e4edde5b9d93f2048793d6.png)\n\n看一下admin-post.php 第3行将WP_ADMIN定义为true\n\n也就是说，is_admin方法，检查的是：此时运行时常量WP_ADMIN的值是否为true。\n\n在wordpress中，WP_ADMIN只是用来标识该文件是否为后台文件。大多数后台文件，都会在脚本中定义WP_ADMIN为true(例如wp-admin目录下的admin-post.php等)， 因此is_admin方法检测通过时，只能说明此是通过后台文件作为入口，调用debug_parameters方法，并不能有效的验证此时访问者的身份是否是admin\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/33f902eec67376c6d25e3d0dd6a9fb5f.png)\n\n前台index.php无法触发\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f4c0cca46dd5d5fc3b030c0551588024.png)\n\nwp-admin目录下的about.php可以触发\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/2cc7e92daa9871394958530b342e44df.png)\n\n可见，wp-admin下任意文件为入口，都可以触发该漏洞，也就是说，在构造payload以及进行防护时，需要注意\n\nhttp://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\n\n这里xxx可以是绝大多数后台php文件\n\n### 思考二：\n\n访问http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options 时，是如何将get请求中的swp_debug=get_user_options与get_user_options功能模块关联起来，调用此功能模块执行相应的功能呢？\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/c63a5db2ef1357c6fb1c0c176eb5195f.png)\n\n同理，当访问http://127.0.0.1/wordpress/index.php?swp_debug=load_options 时，后台是如何解析get请求，并找到load_options模块的？\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9d224e3ea0e9aff4641c2f37250366e1.png)\n\n开始的时候，笔者以为是有相关的路由配置(类似于django中的url解析)，或者说是类似MVC结构中的控制器（类似thinkphp中的url普通模式http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：\n\n见下图，SWP_Utility::debug方法\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/d8e014b47e8d8c511fb6f6ef359efe43.png)\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f416a39a73e5de93a96b836bf844b57a.png)\n\n在debug_parameters方法中的所有if分支中逐个执行debug方法，逐个将debug方法内注册的值（’load_options’、’get_user_options’等）和get请求中swp_debug的值进行比较，如果一样，则执行该功能模块的代码，如果不一样，则进入下个if中。道理同等于switch\n","source":"_posts/WordPress-Social-Warfare-Rce.md","raw":"---\ntitle: WordPress-Social-Warfare远程代码执行漏洞分析\ndate: 2019-09-24 17:49:58\ntags: web漏洞分析\ncategories: 技术\n---\n\n------\n\n<div align=\"center\">{% asset_img 1.png%}</div>\n\nsocial-warfare是一款 WordPress社交分享按钮插件。 该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量\n\nsocial-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞\n\n<!--more-->\n\n# 背景介绍\n\nsocial-warfare是一款 WordPress社交分享按钮插件。 不同于大多数WordPress社交分享插件，social-warfar最大的优势在于其轻便性与高效性。它不会像其他共享插件一样减慢网站速度，这也是很多用户使用其作为自己网站社交分享插件的原因。\n\n该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9cab96ac7dc5a8c199faa4cea800d35b.png)\n\n## 漏洞描述\n\nsocial-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞。\n\n攻击成功的条件只需要如下两条：\n\n只要符合以上两个条件，无需复杂的payload构造，即可通过简简单单的一个get请求，远程执行任意代码。\n与wordpress自身漏洞修补不同，对于插件的漏洞，wordpress并不会在后台对该插件进行自动升级，仅仅是提示有新版本可用。\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f09cfb9a4bf7ca3a89624bbdab4ece3a.png)\n\n简言之，由于该机制的存在，目前还有大部分使用该插件的站长，所使用着仍存在漏洞版本的social-warfare插件，面临着被攻击的风险。\n\n与此同时，这个漏洞，还是一个洞中洞，开发者的一连串失误，将该漏洞威胁等级逐步增高。\n\n&nbsp;\n\n## 受影响的系统版本\n\nsocial-warfare&lt;= 3.5.2\n\n&nbsp;\n\n## 漏洞编号\n\nCVE-2019-9978\n\n&nbsp;\n\n# 漏洞细节\n\nsocial-warfare安装后如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/6cea63341fcc7d1afae9189460553fb4.png)\n\n如图中红框所见，该插件提供了一个简洁易用的分享功能栏。\n\n首先，通过github的commit记录，找到漏洞触发点\n\n漏洞触发点位于/wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php中的debug_parameters方法中\n\n首先分析下debug_parameters方法\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a7ba07b0bc7379abc39d0dc734bef4d.png)\n\n该方法提供了一种允许更容易调试数据库迁移功能的方法。\n\n先来看下get_user_options功能的代码块\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/4e04fc9b7265e54c0e15a3635fc5874b.png)\n\n此处功能模块加载wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php 中initialize_database方法中的$defaults数组中的配置信息，如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/19b94966c0e303f8164286461e0338e2.png)\n\n在访问与执行该功能模块后，返回相应的配置信息\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/fcd76e490cc82b1d1ca222c7fc4727b7.png)\n\n接下来分析漏洞触发点 位于如下图中的if分支中\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/34a240e81557704f1c9745d6080e23ad.png)\n\n也就是在’load_options’这个功能模块中。该功能模块，是开发者用来调试数据库迁移功能的，在对用户实现实际的业务功能中，该模块并没有被使用过。\n\n逐行分析下此功能模块 首先，可以看到如下图代码块:\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png)\n\n如红框中所见，这里的代码看起来，需要通过is_admin()方法的校验。看起来，这里需要有admin权限才可以执行后续代码触发漏洞。按照以往经验，这是一个需要后台权限才可以代码执行的漏洞（但这里的推测并不正确，具体的见下文分析）\n\n紧接着，通过file_get_contents方法，发送请求\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/17cbe28ee96c48c8baab35742002bf3d.png)\n\n其中的$_GET[‘swp_url’]我们可控，例如：\n\nhttp://127.0.0\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0594cb2ffa6f8a291c0ba8d41e1e5668.png)\n\n这样file_get_contents会访问 http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量 到此为止，我们通过构造链接传入file_get_contents，达到完全可控$options变量中的内容的目的\n\n接下来，会从$options变量中提取出内容，并进行解析，如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/bded25e5da4ccfa0f16d614b52548839.png)\n\n随后，将解析出的$options值拼接后赋予$array，如使用我们案例中的1.php,那么$array的值为：return phpinfo()\n\n接下来，$array中的值会传递入eval中，造成代码执行\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/dd061c81db5e40245e4458ff5f8bc8ba.png)\n\n实际效果如下图\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/66a4b42781354e24b2cde9e630f51bb1.png)\n\n漏洞分析到此结束，本次漏洞影响很大，但漏洞自身没有什么亮点\n\n接下来，看一下官方是如何修补的：\n\n通过github的commit记录，获取此次的修补方案。\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/a134e944bfa46ae34edb4d687d33f597.png)\n\n此次修补，将lib/utilities/SWP_Database_Migration.php中的221-284行，将debug_parameters方法中存在问题的load_options模块代码全部删除 所以不存在绕过补丁的可能性。\n\n在分析此漏洞时，有几处有意思的地方，和大家分享一下：\n\n### 思考一：\n\n先来看下如下操作：\n\n首先，我们退出wordpress登陆\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0dba144a1bc952bc4cda36f0cce39b6c.png)\n\n可见，此时我们并没有登陆，也没有admin权限\n\n接着，我们访问poc\n\nhttp://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/650252922e64b757e1d7c89b063cc305.png)\n\npayload仍然可以触发\n\n回顾上文此处\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png)\n\n在漏洞分析环节，我们的猜测是，由于is_admin方法的校验，此处应该是后台漏洞，但是在没有登陆的情况下，仍然触发了。\n\n这是为什么呢？\n\n原因如下： 先来看看is_admin方法是如何实现的\n\n位于/wp-includes/load.php中\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/de06cb5281ce8f86eff50fab3c185a22.png)\n\n可以看到，有一个if-elseif判断\n\n在elseif中判断defined (‘WP_ADMIN’)的值\n\n由于我们构造的payload，入口是admin-post.php\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0fed2e5c53e4edde5b9d93f2048793d6.png)\n\n看一下admin-post.php 第3行将WP_ADMIN定义为true\n\n也就是说，is_admin方法，检查的是：此时运行时常量WP_ADMIN的值是否为true。\n\n在wordpress中，WP_ADMIN只是用来标识该文件是否为后台文件。大多数后台文件，都会在脚本中定义WP_ADMIN为true(例如wp-admin目录下的admin-post.php等)， 因此is_admin方法检测通过时，只能说明此是通过后台文件作为入口，调用debug_parameters方法，并不能有效的验证此时访问者的身份是否是admin\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/33f902eec67376c6d25e3d0dd6a9fb5f.png)\n\n前台index.php无法触发\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f4c0cca46dd5d5fc3b030c0551588024.png)\n\nwp-admin目录下的about.php可以触发\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/2cc7e92daa9871394958530b342e44df.png)\n\n可见，wp-admin下任意文件为入口，都可以触发该漏洞，也就是说，在构造payload以及进行防护时，需要注意\n\nhttp://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\n\n这里xxx可以是绝大多数后台php文件\n\n### 思考二：\n\n访问http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options 时，是如何将get请求中的swp_debug=get_user_options与get_user_options功能模块关联起来，调用此功能模块执行相应的功能呢？\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/c63a5db2ef1357c6fb1c0c176eb5195f.png)\n\n同理，当访问http://127.0.0.1/wordpress/index.php?swp_debug=load_options 时，后台是如何解析get请求，并找到load_options模块的？\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9d224e3ea0e9aff4641c2f37250366e1.png)\n\n开始的时候，笔者以为是有相关的路由配置(类似于django中的url解析)，或者说是类似MVC结构中的控制器（类似thinkphp中的url普通模式http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：\n\n见下图，SWP_Utility::debug方法\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/d8e014b47e8d8c511fb6f6ef359efe43.png)\n\n![](http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f416a39a73e5de93a96b836bf844b57a.png)\n\n在debug_parameters方法中的所有if分支中逐个执行debug方法，逐个将debug方法内注册的值（’load_options’、’get_user_options’等）和get请求中swp_debug的值进行比较，如果一样，则执行该功能模块的代码，如果不一样，则进入下个if中。道理同等于switch\n","slug":"WordPress-Social-Warfare-Rce","published":1,"updated":"2019-09-24T10:29:11.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7agi0003kwa9al921v1x","content":"<hr>\n<div align=\"center\"><img src=\"/WordPress-Social-Warfare-Rce/1.png\"></div>\n\n<p>social-warfare是一款 WordPress社交分享按钮插件。 该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量</p>\n<p>social-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞</p>\n<a id=\"more\"></a>\n<h1 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h1><p>social-warfare是一款 WordPress社交分享按钮插件。 不同于大多数WordPress社交分享插件，social-warfar最大的优势在于其轻便性与高效性。它不会像其他共享插件一样减慢网站速度，这也是很多用户使用其作为自己网站社交分享插件的原因。</p>\n<p>该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9cab96ac7dc5a8c199faa4cea800d35b.png\" alt></p>\n<h2 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h2><p>social-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞。</p>\n<p>攻击成功的条件只需要如下两条：</p>\n<p>只要符合以上两个条件，无需复杂的payload构造，即可通过简简单单的一个get请求，远程执行任意代码。<br>与wordpress自身漏洞修补不同，对于插件的漏洞，wordpress并不会在后台对该插件进行自动升级，仅仅是提示有新版本可用。</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f09cfb9a4bf7ca3a89624bbdab4ece3a.png\" alt></p>\n<p>简言之，由于该机制的存在，目前还有大部分使用该插件的站长，所使用着仍存在漏洞版本的social-warfare插件，面临着被攻击的风险。</p>\n<p>与此同时，这个漏洞，还是一个洞中洞，开发者的一连串失误，将该漏洞威胁等级逐步增高。</p>\n<p>&nbsp;</p>\n<h2 id=\"受影响的系统版本\"><a href=\"#受影响的系统版本\" class=\"headerlink\" title=\"受影响的系统版本\"></a>受影响的系统版本</h2><p>social-warfare&lt;= 3.5.2</p>\n<p>&nbsp;</p>\n<h2 id=\"漏洞编号\"><a href=\"#漏洞编号\" class=\"headerlink\" title=\"漏洞编号\"></a>漏洞编号</h2><p>CVE-2019-9978</p>\n<p>&nbsp;</p>\n<h1 id=\"漏洞细节\"><a href=\"#漏洞细节\" class=\"headerlink\" title=\"漏洞细节\"></a>漏洞细节</h1><p>social-warfare安装后如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/6cea63341fcc7d1afae9189460553fb4.png\" alt></p>\n<p>如图中红框所见，该插件提供了一个简洁易用的分享功能栏。</p>\n<p>首先，通过github的commit记录，找到漏洞触发点</p>\n<p>漏洞触发点位于/wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php中的debug_parameters方法中</p>\n<p>首先分析下debug_parameters方法</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a7ba07b0bc7379abc39d0dc734bef4d.png\" alt></p>\n<p>该方法提供了一种允许更容易调试数据库迁移功能的方法。</p>\n<p>先来看下get_user_options功能的代码块</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/4e04fc9b7265e54c0e15a3635fc5874b.png\" alt></p>\n<p>此处功能模块加载wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php 中initialize_database方法中的$defaults数组中的配置信息，如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/19b94966c0e303f8164286461e0338e2.png\" alt></p>\n<p>在访问与执行该功能模块后，返回相应的配置信息</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/fcd76e490cc82b1d1ca222c7fc4727b7.png\" alt></p>\n<p>接下来分析漏洞触发点 位于如下图中的if分支中</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/34a240e81557704f1c9745d6080e23ad.png\" alt></p>\n<p>也就是在’load_options’这个功能模块中。该功能模块，是开发者用来调试数据库迁移功能的，在对用户实现实际的业务功能中，该模块并没有被使用过。</p>\n<p>逐行分析下此功能模块 首先，可以看到如下图代码块:</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png\" alt></p>\n<p>如红框中所见，这里的代码看起来，需要通过is_admin()方法的校验。看起来，这里需要有admin权限才可以执行后续代码触发漏洞。按照以往经验，这是一个需要后台权限才可以代码执行的漏洞（但这里的推测并不正确，具体的见下文分析）</p>\n<p>紧接着，通过file_get_contents方法，发送请求</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/17cbe28ee96c48c8baab35742002bf3d.png\" alt></p>\n<p>其中的$_GET[‘swp_url’]我们可控，例如：</p>\n<p><a href=\"http://127.0.0\" target=\"_blank\" rel=\"noopener\">http://127.0.0</a></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0594cb2ffa6f8a291c0ba8d41e1e5668.png\" alt></p>\n<p>这样file_get_contents会访问 <a href=\"http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量</a> 到此为止，我们通过构造链接传入file_get_contents，达到完全可控$options变量中的内容的目的</p>\n<p>接下来，会从$options变量中提取出内容，并进行解析，如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/bded25e5da4ccfa0f16d614b52548839.png\" alt></p>\n<p>随后，将解析出的$options值拼接后赋予$array，如使用我们案例中的1.php,那么$array的值为：return phpinfo()</p>\n<p>接下来，$array中的值会传递入eval中，造成代码执行</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/dd061c81db5e40245e4458ff5f8bc8ba.png\" alt></p>\n<p>实际效果如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/66a4b42781354e24b2cde9e630f51bb1.png\" alt></p>\n<p>漏洞分析到此结束，本次漏洞影响很大，但漏洞自身没有什么亮点</p>\n<p>接下来，看一下官方是如何修补的：</p>\n<p>通过github的commit记录，获取此次的修补方案。</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/a134e944bfa46ae34edb4d687d33f597.png\" alt></p>\n<p>此次修补，将lib/utilities/SWP_Database_Migration.php中的221-284行，将debug_parameters方法中存在问题的load_options模块代码全部删除 所以不存在绕过补丁的可能性。</p>\n<p>在分析此漏洞时，有几处有意思的地方，和大家分享一下：</p>\n<h3 id=\"思考一：\"><a href=\"#思考一：\" class=\"headerlink\" title=\"思考一：\"></a>思考一：</h3><p>先来看下如下操作：</p>\n<p>首先，我们退出wordpress登陆</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0dba144a1bc952bc4cda36f0cce39b6c.png\" alt></p>\n<p>可见，此时我们并没有登陆，也没有admin权限</p>\n<p>接着，我们访问poc</p>\n<p><a href=\"http://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php</a></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/650252922e64b757e1d7c89b063cc305.png\" alt></p>\n<p>payload仍然可以触发</p>\n<p>回顾上文此处</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png\" alt></p>\n<p>在漏洞分析环节，我们的猜测是，由于is_admin方法的校验，此处应该是后台漏洞，但是在没有登陆的情况下，仍然触发了。</p>\n<p>这是为什么呢？</p>\n<p>原因如下： 先来看看is_admin方法是如何实现的</p>\n<p>位于/wp-includes/load.php中</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/de06cb5281ce8f86eff50fab3c185a22.png\" alt></p>\n<p>可以看到，有一个if-elseif判断</p>\n<p>在elseif中判断defined (‘WP_ADMIN’)的值</p>\n<p>由于我们构造的payload，入口是admin-post.php</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0fed2e5c53e4edde5b9d93f2048793d6.png\" alt></p>\n<p>看一下admin-post.php 第3行将WP_ADMIN定义为true</p>\n<p>也就是说，is_admin方法，检查的是：此时运行时常量WP_ADMIN的值是否为true。</p>\n<p>在wordpress中，WP_ADMIN只是用来标识该文件是否为后台文件。大多数后台文件，都会在脚本中定义WP_ADMIN为true(例如wp-admin目录下的admin-post.php等)， 因此is_admin方法检测通过时，只能说明此是通过后台文件作为入口，调用debug_parameters方法，并不能有效的验证此时访问者的身份是否是admin</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/33f902eec67376c6d25e3d0dd6a9fb5f.png\" alt></p>\n<p>前台index.php无法触发</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f4c0cca46dd5d5fc3b030c0551588024.png\" alt></p>\n<p>wp-admin目录下的about.php可以触发</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/2cc7e92daa9871394958530b342e44df.png\" alt></p>\n<p>可见，wp-admin下任意文件为入口，都可以触发该漏洞，也就是说，在构造payload以及进行防护时，需要注意</p>\n<p><a href=\"http://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php</a></p>\n<p>这里xxx可以是绝大多数后台php文件</p>\n<h3 id=\"思考二：\"><a href=\"#思考二：\" class=\"headerlink\" title=\"思考二：\"></a>思考二：</h3><p>访问<a href=\"http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options</a> 时，是如何将get请求中的swp_debug=get_user_options与get_user_options功能模块关联起来，调用此功能模块执行相应的功能呢？</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/c63a5db2ef1357c6fb1c0c176eb5195f.png\" alt></p>\n<p>同理，当访问<a href=\"http://127.0.0.1/wordpress/index.php?swp_debug=load_options\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/index.php?swp_debug=load_options</a> 时，后台是如何解析get请求，并找到load_options模块的？</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9d224e3ea0e9aff4641c2f37250366e1.png\" alt></p>\n<p>开始的时候，笔者以为是有相关的路由配置(类似于django中的url解析)，或者说是类似MVC结构中的控制器（类似thinkphp中的url普通模式<a href=\"http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：\" target=\"_blank\" rel=\"noopener\">http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：</a></p>\n<p>见下图，SWP_Utility::debug方法</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/d8e014b47e8d8c511fb6f6ef359efe43.png\" alt></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f416a39a73e5de93a96b836bf844b57a.png\" alt></p>\n<p>在debug_parameters方法中的所有if分支中逐个执行debug方法，逐个将debug方法内注册的值（’load_options’、’get_user_options’等）和get请求中swp_debug的值进行比较，如果一样，则执行该功能模块的代码，如果不一样，则进入下个if中。道理同等于switch</p>\n","site":{"data":{}},"excerpt":"<hr>\n<div align=\"center\"><img src=\"/WordPress-Social-Warfare-Rce/1.png\"></div>\n\n<p>social-warfare是一款 WordPress社交分享按钮插件。 该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量</p>\n<p>social-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞</p>","more":"<h1 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h1><p>social-warfare是一款 WordPress社交分享按钮插件。 不同于大多数WordPress社交分享插件，social-warfar最大的优势在于其轻便性与高效性。它不会像其他共享插件一样减慢网站速度，这也是很多用户使用其作为自己网站社交分享插件的原因。</p>\n<p>该插件被wordpress用户广泛的应用： 从官网看，该插件官方的统计是超过90万的下载量</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9cab96ac7dc5a8c199faa4cea800d35b.png\" alt></p>\n<h2 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h2><p>social-warfare &lt;= 3.5.2版本中，程序没有对传入参数进行严格控制以及过滤，导致攻击者可构造恶意payload，无需后台权限，直接造成远程命令执行漏洞。</p>\n<p>攻击成功的条件只需要如下两条：</p>\n<p>只要符合以上两个条件，无需复杂的payload构造，即可通过简简单单的一个get请求，远程执行任意代码。<br>与wordpress自身漏洞修补不同，对于插件的漏洞，wordpress并不会在后台对该插件进行自动升级，仅仅是提示有新版本可用。</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f09cfb9a4bf7ca3a89624bbdab4ece3a.png\" alt></p>\n<p>简言之，由于该机制的存在，目前还有大部分使用该插件的站长，所使用着仍存在漏洞版本的social-warfare插件，面临着被攻击的风险。</p>\n<p>与此同时，这个漏洞，还是一个洞中洞，开发者的一连串失误，将该漏洞威胁等级逐步增高。</p>\n<p>&nbsp;</p>\n<h2 id=\"受影响的系统版本\"><a href=\"#受影响的系统版本\" class=\"headerlink\" title=\"受影响的系统版本\"></a>受影响的系统版本</h2><p>social-warfare&lt;= 3.5.2</p>\n<p>&nbsp;</p>\n<h2 id=\"漏洞编号\"><a href=\"#漏洞编号\" class=\"headerlink\" title=\"漏洞编号\"></a>漏洞编号</h2><p>CVE-2019-9978</p>\n<p>&nbsp;</p>\n<h1 id=\"漏洞细节\"><a href=\"#漏洞细节\" class=\"headerlink\" title=\"漏洞细节\"></a>漏洞细节</h1><p>social-warfare安装后如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/6cea63341fcc7d1afae9189460553fb4.png\" alt></p>\n<p>如图中红框所见，该插件提供了一个简洁易用的分享功能栏。</p>\n<p>首先，通过github的commit记录，找到漏洞触发点</p>\n<p>漏洞触发点位于/wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php中的debug_parameters方法中</p>\n<p>首先分析下debug_parameters方法</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a7ba07b0bc7379abc39d0dc734bef4d.png\" alt></p>\n<p>该方法提供了一种允许更容易调试数据库迁移功能的方法。</p>\n<p>先来看下get_user_options功能的代码块</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/4e04fc9b7265e54c0e15a3635fc5874b.png\" alt></p>\n<p>此处功能模块加载wp-content/plugins/social-warfare-3.5.2/lib/utilities/SWP_Database_Migration.php 中initialize_database方法中的$defaults数组中的配置信息，如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/19b94966c0e303f8164286461e0338e2.png\" alt></p>\n<p>在访问与执行该功能模块后，返回相应的配置信息</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/fcd76e490cc82b1d1ca222c7fc4727b7.png\" alt></p>\n<p>接下来分析漏洞触发点 位于如下图中的if分支中</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/34a240e81557704f1c9745d6080e23ad.png\" alt></p>\n<p>也就是在’load_options’这个功能模块中。该功能模块，是开发者用来调试数据库迁移功能的，在对用户实现实际的业务功能中，该模块并没有被使用过。</p>\n<p>逐行分析下此功能模块 首先，可以看到如下图代码块:</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png\" alt></p>\n<p>如红框中所见，这里的代码看起来，需要通过is_admin()方法的校验。看起来，这里需要有admin权限才可以执行后续代码触发漏洞。按照以往经验，这是一个需要后台权限才可以代码执行的漏洞（但这里的推测并不正确，具体的见下文分析）</p>\n<p>紧接着，通过file_get_contents方法，发送请求</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/17cbe28ee96c48c8baab35742002bf3d.png\" alt></p>\n<p>其中的$_GET[‘swp_url’]我们可控，例如：</p>\n<p><a href=\"http://127.0.0\" target=\"_blank\" rel=\"noopener\">http://127.0.0</a></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0594cb2ffa6f8a291c0ba8d41e1e5668.png\" alt></p>\n<p>这样file_get_contents会访问 <a href=\"http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/1.php?swp_debug=get_user_options，并将我们构造好的payload传递给$options变量</a> 到此为止，我们通过构造链接传入file_get_contents，达到完全可控$options变量中的内容的目的</p>\n<p>接下来，会从$options变量中提取出内容，并进行解析，如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/bded25e5da4ccfa0f16d614b52548839.png\" alt></p>\n<p>随后，将解析出的$options值拼接后赋予$array，如使用我们案例中的1.php,那么$array的值为：return phpinfo()</p>\n<p>接下来，$array中的值会传递入eval中，造成代码执行</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/dd061c81db5e40245e4458ff5f8bc8ba.png\" alt></p>\n<p>实际效果如下图</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/66a4b42781354e24b2cde9e630f51bb1.png\" alt></p>\n<p>漏洞分析到此结束，本次漏洞影响很大，但漏洞自身没有什么亮点</p>\n<p>接下来，看一下官方是如何修补的：</p>\n<p>通过github的commit记录，获取此次的修补方案。</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/a134e944bfa46ae34edb4d687d33f597.png\" alt></p>\n<p>此次修补，将lib/utilities/SWP_Database_Migration.php中的221-284行，将debug_parameters方法中存在问题的load_options模块代码全部删除 所以不存在绕过补丁的可能性。</p>\n<p>在分析此漏洞时，有几处有意思的地方，和大家分享一下：</p>\n<h3 id=\"思考一：\"><a href=\"#思考一：\" class=\"headerlink\" title=\"思考一：\"></a>思考一：</h3><p>先来看下如下操作：</p>\n<p>首先，我们退出wordpress登陆</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0dba144a1bc952bc4cda36f0cce39b6c.png\" alt></p>\n<p>可见，此时我们并没有登陆，也没有admin权限</p>\n<p>接着，我们访问poc</p>\n<p><a href=\"http://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php</a></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/650252922e64b757e1d7c89b063cc305.png\" alt></p>\n<p>payload仍然可以触发</p>\n<p>回顾上文此处</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9a74d7ee9fd35b14d8f9ef267f87fd38.png\" alt></p>\n<p>在漏洞分析环节，我们的猜测是，由于is_admin方法的校验，此处应该是后台漏洞，但是在没有登陆的情况下，仍然触发了。</p>\n<p>这是为什么呢？</p>\n<p>原因如下： 先来看看is_admin方法是如何实现的</p>\n<p>位于/wp-includes/load.php中</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/de06cb5281ce8f86eff50fab3c185a22.png\" alt></p>\n<p>可以看到，有一个if-elseif判断</p>\n<p>在elseif中判断defined (‘WP_ADMIN’)的值</p>\n<p>由于我们构造的payload，入口是admin-post.php</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/0fed2e5c53e4edde5b9d93f2048793d6.png\" alt></p>\n<p>看一下admin-post.php 第3行将WP_ADMIN定义为true</p>\n<p>也就是说，is_admin方法，检查的是：此时运行时常量WP_ADMIN的值是否为true。</p>\n<p>在wordpress中，WP_ADMIN只是用来标识该文件是否为后台文件。大多数后台文件，都会在脚本中定义WP_ADMIN为true(例如wp-admin目录下的admin-post.php等)， 因此is_admin方法检测通过时，只能说明此是通过后台文件作为入口，调用debug_parameters方法，并不能有效的验证此时访问者的身份是否是admin</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/33f902eec67376c6d25e3d0dd6a9fb5f.png\" alt></p>\n<p>前台index.php无法触发</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f4c0cca46dd5d5fc3b030c0551588024.png\" alt></p>\n<p>wp-admin目录下的about.php可以触发</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/2cc7e92daa9871394958530b342e44df.png\" alt></p>\n<p>可见，wp-admin下任意文件为入口，都可以触发该漏洞，也就是说，在构造payload以及进行防护时，需要注意</p>\n<p><a href=\"http://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/wp-admin/[xxx].php?swp_debug=load_options&amp;swp_url=http://127.0.0.1/1.php</a></p>\n<p>这里xxx可以是绝大多数后台php文件</p>\n<h3 id=\"思考二：\"><a href=\"#思考二：\" class=\"headerlink\" title=\"思考二：\"></a>思考二：</h3><p>访问<a href=\"http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/index.php?swp_debug=get_user_options</a> 时，是如何将get请求中的swp_debug=get_user_options与get_user_options功能模块关联起来，调用此功能模块执行相应的功能呢？</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/c63a5db2ef1357c6fb1c0c176eb5195f.png\" alt></p>\n<p>同理，当访问<a href=\"http://127.0.0.1/wordpress/index.php?swp_debug=load_options\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/wordpress/index.php?swp_debug=load_options</a> 时，后台是如何解析get请求，并找到load_options模块的？</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/9d224e3ea0e9aff4641c2f37250366e1.png\" alt></p>\n<p>开始的时候，笔者以为是有相关的路由配置(类似于django中的url解析)，或者说是类似MVC结构中的控制器（类似thinkphp中的url普通模式<a href=\"http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：\" target=\"_blank\" rel=\"noopener\">http://localhost/?m=home&amp;c=user&amp;a=login&amp;var=value）这样的结构，但实际真相很简单：</a></p>\n<p>见下图，SWP_Utility::debug方法</p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/d8e014b47e8d8c511fb6f6ef359efe43.png\" alt></p>\n<p><img src=\"http://alphalab1-wordpress.stor.sinaapp.com/uploads/2019/05/f416a39a73e5de93a96b836bf844b57a.png\" alt></p>\n<p>在debug_parameters方法中的所有if分支中逐个执行debug方法，逐个将debug方法内注册的值（’load_options’、’get_user_options’等）和get请求中swp_debug的值进行比较，如果一样，则执行该功能模块的代码，如果不一样，则进入下个if中。道理同等于switch</p>"},{"title":"如何在窗口打开之前预览窗口内容","date":"2017-05-19T14:49:04.000Z","_content":"<div align=\"center\">{% asset_img 0.png%}<div>\n\n你是否希望在屏幕上预览窗口中的内容，而无需通过点击切换到它们？  \n在Windows系统下你完全能够做到这一点。  \n要了解如何使用这些功能，请按照以下说明进行操作。\n<!--more-->\n</br>\n### 方法一：通过预览任务栏缩略图\n{% asset_img 1.jpg%}\n**将鼠标悬停在任务栏上要预览的程序的图标上，将显示一个小窗口。**<font color=#A9A9A9>这个小窗口就是程序打开后界面的缩略图。</font> \n</br></font> \n{% asset_img 2.jpg%}\n**将鼠标悬停在要预览的窗口的缩略图上。**<font color=#A9A9A9>桌面的其余部分会淡出，屏幕中会显示窗口的内容。</font> \n</br>\n{% asset_img 3.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>将鼠标光标移离缩略图窗口。</font> \n</br>\n### 方法二：使用Windows切换器预览窗口\n{% asset_img 4.jpg%}\n**显示Windows切换器。**<font color=#A9A9A9>按住Alt键，然后同时点击Tab↹键一次显示Windows切换器窗口。此时继续按住Alt键。</font>\n</br>\n{% asset_img 5.jpg%}\n**预览窗口。**<font color=#A9A9A9>使用键盘上的Tab↹键，循环浏览Windows切换器窗口，直到选择要预览的窗口。这时桌面的其余部分会淡出，露出选中窗口的内容。</font>\n</br>\n{% asset_img 6.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>通过点击Tab循环回到您之前工作的窗口，然后释放Alt键。</font>\n</br>\n### 方法三：使用Flip 3D预览（仅适用于Windows Vista/7）\n{% asset_img 7.jpg%}\n**显示Flip 3D。**<font color=#A9A9A9>按住⊞Win键，同时按Tab↹键一次。此时继续按住⊞Win键。</font>\n</br>\n{% asset_img 8.jpg%}\n**预览窗口。**<font color=#A9A9A9>点击Tab↹键前进一个窗口，前进直到您要预览的窗口显示在屏幕上。</font>\n</br>\n{% asset_img 9.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>使用Tab↹键返回到您之前工作的窗口，并释放⊞Win键。</font>","source":"_posts/Preview-a-Window-Before-You-Open-It.md","raw":"---\ntitle: 如何在窗口打开之前预览窗口内容\ndate: 2017-05-19 22:49:04\ntags: wikiHow\ncategories: 技术\n---\n<div align=\"center\">{% asset_img 0.png%}<div>\n\n你是否希望在屏幕上预览窗口中的内容，而无需通过点击切换到它们？  \n在Windows系统下你完全能够做到这一点。  \n要了解如何使用这些功能，请按照以下说明进行操作。\n<!--more-->\n</br>\n### 方法一：通过预览任务栏缩略图\n{% asset_img 1.jpg%}\n**将鼠标悬停在任务栏上要预览的程序的图标上，将显示一个小窗口。**<font color=#A9A9A9>这个小窗口就是程序打开后界面的缩略图。</font> \n</br></font> \n{% asset_img 2.jpg%}\n**将鼠标悬停在要预览的窗口的缩略图上。**<font color=#A9A9A9>桌面的其余部分会淡出，屏幕中会显示窗口的内容。</font> \n</br>\n{% asset_img 3.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>将鼠标光标移离缩略图窗口。</font> \n</br>\n### 方法二：使用Windows切换器预览窗口\n{% asset_img 4.jpg%}\n**显示Windows切换器。**<font color=#A9A9A9>按住Alt键，然后同时点击Tab↹键一次显示Windows切换器窗口。此时继续按住Alt键。</font>\n</br>\n{% asset_img 5.jpg%}\n**预览窗口。**<font color=#A9A9A9>使用键盘上的Tab↹键，循环浏览Windows切换器窗口，直到选择要预览的窗口。这时桌面的其余部分会淡出，露出选中窗口的内容。</font>\n</br>\n{% asset_img 6.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>通过点击Tab循环回到您之前工作的窗口，然后释放Alt键。</font>\n</br>\n### 方法三：使用Flip 3D预览（仅适用于Windows Vista/7）\n{% asset_img 7.jpg%}\n**显示Flip 3D。**<font color=#A9A9A9>按住⊞Win键，同时按Tab↹键一次。此时继续按住⊞Win键。</font>\n</br>\n{% asset_img 8.jpg%}\n**预览窗口。**<font color=#A9A9A9>点击Tab↹键前进一个窗口，前进直到您要预览的窗口显示在屏幕上。</font>\n</br>\n{% asset_img 9.jpg%}\n**返回到你之前工作的窗口。**<font color=#A9A9A9>使用Tab↹键返回到您之前工作的窗口，并释放⊞Win键。</font>","slug":"Preview-a-Window-Before-You-Open-It","published":1,"updated":"2019-09-24T07:15:14.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7agr0006kwa92novnbqu","content":"<p><div align=\"center\"><img src=\"/Preview-a-Window-Before-You-Open-It/0.png\"><div></div></div></p>\n<p>你是否希望在屏幕上预览窗口中的内容，而无需通过点击切换到它们？<br>在Windows系统下你完全能够做到这一点。<br>要了解如何使用这些功能，请按照以下说明进行操作。<br><a id=\"more\"></a><br><br></p>\n<h3 id=\"方法一：通过预览任务栏缩略图\"><a href=\"#方法一：通过预览任务栏缩略图\" class=\"headerlink\" title=\"方法一：通过预览任务栏缩略图\"></a>方法一：通过预览任务栏缩略图</h3><img src=\"/Preview-a-Window-Before-You-Open-It/1.jpg\">\n<p><strong>将鼠标悬停在任务栏上要预览的程序的图标上，将显示一个小窗口。</strong><font color=\"#A9A9A9\">这个小窗口就是程序打开后界面的缩略图。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/2.jpg\"><br><strong>将鼠标悬停在要预览的窗口的缩略图上。</strong><font color=\"#A9A9A9\">桌面的其余部分会淡出，屏幕中会显示窗口的内容。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/3.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">将鼠标光标移离缩略图窗口。</font><br><br></p>\n<h3 id=\"方法二：使用Windows切换器预览窗口\"><a href=\"#方法二：使用Windows切换器预览窗口\" class=\"headerlink\" title=\"方法二：使用Windows切换器预览窗口\"></a>方法二：使用Windows切换器预览窗口</h3><img src=\"/Preview-a-Window-Before-You-Open-It/4.jpg\">\n<p><strong>显示Windows切换器。</strong><font color=\"#A9A9A9\">按住Alt键，然后同时点击Tab↹键一次显示Windows切换器窗口。此时继续按住Alt键。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/5.jpg\"><br><strong>预览窗口。</strong><font color=\"#A9A9A9\">使用键盘上的Tab↹键，循环浏览Windows切换器窗口，直到选择要预览的窗口。这时桌面的其余部分会淡出，露出选中窗口的内容。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/6.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">通过点击Tab循环回到您之前工作的窗口，然后释放Alt键。</font><br><br></p>\n<h3 id=\"方法三：使用Flip-3D预览（仅适用于Windows-Vista-7）\"><a href=\"#方法三：使用Flip-3D预览（仅适用于Windows-Vista-7）\" class=\"headerlink\" title=\"方法三：使用Flip 3D预览（仅适用于Windows Vista/7）\"></a>方法三：使用Flip 3D预览（仅适用于Windows Vista/7）</h3><img src=\"/Preview-a-Window-Before-You-Open-It/7.jpg\">\n<p><strong>显示Flip 3D。</strong><font color=\"#A9A9A9\">按住⊞Win键，同时按Tab↹键一次。此时继续按住⊞Win键。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/8.jpg\"><br><strong>预览窗口。</strong><font color=\"#A9A9A9\">点击Tab↹键前进一个窗口，前进直到您要预览的窗口显示在屏幕上。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/9.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">使用Tab↹键返回到您之前工作的窗口，并释放⊞Win键。</font></p>\n","site":{"data":{}},"excerpt":"<p><div align=\"center\"><img src=\"/Preview-a-Window-Before-You-Open-It/0.png\"><div></div></div></p>\n<p>你是否希望在屏幕上预览窗口中的内容，而无需通过点击切换到它们？<br>在Windows系统下你完全能够做到这一点。<br>要了解如何使用这些功能，请按照以下说明进行操作。<br>","more":"<br><br></p>\n<h3 id=\"方法一：通过预览任务栏缩略图\"><a href=\"#方法一：通过预览任务栏缩略图\" class=\"headerlink\" title=\"方法一：通过预览任务栏缩略图\"></a>方法一：通过预览任务栏缩略图</h3><img src=\"/Preview-a-Window-Before-You-Open-It/1.jpg\">\n<p><strong>将鼠标悬停在任务栏上要预览的程序的图标上，将显示一个小窗口。</strong><font color=\"#A9A9A9\">这个小窗口就是程序打开后界面的缩略图。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/2.jpg\"><br><strong>将鼠标悬停在要预览的窗口的缩略图上。</strong><font color=\"#A9A9A9\">桌面的其余部分会淡出，屏幕中会显示窗口的内容。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/3.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">将鼠标光标移离缩略图窗口。</font><br><br></p>\n<h3 id=\"方法二：使用Windows切换器预览窗口\"><a href=\"#方法二：使用Windows切换器预览窗口\" class=\"headerlink\" title=\"方法二：使用Windows切换器预览窗口\"></a>方法二：使用Windows切换器预览窗口</h3><img src=\"/Preview-a-Window-Before-You-Open-It/4.jpg\">\n<p><strong>显示Windows切换器。</strong><font color=\"#A9A9A9\">按住Alt键，然后同时点击Tab↹键一次显示Windows切换器窗口。此时继续按住Alt键。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/5.jpg\"><br><strong>预览窗口。</strong><font color=\"#A9A9A9\">使用键盘上的Tab↹键，循环浏览Windows切换器窗口，直到选择要预览的窗口。这时桌面的其余部分会淡出，露出选中窗口的内容。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/6.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">通过点击Tab循环回到您之前工作的窗口，然后释放Alt键。</font><br><br></p>\n<h3 id=\"方法三：使用Flip-3D预览（仅适用于Windows-Vista-7）\"><a href=\"#方法三：使用Flip-3D预览（仅适用于Windows-Vista-7）\" class=\"headerlink\" title=\"方法三：使用Flip 3D预览（仅适用于Windows Vista/7）\"></a>方法三：使用Flip 3D预览（仅适用于Windows Vista/7）</h3><img src=\"/Preview-a-Window-Before-You-Open-It/7.jpg\">\n<p><strong>显示Flip 3D。</strong><font color=\"#A9A9A9\">按住⊞Win键，同时按Tab↹键一次。此时继续按住⊞Win键。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/8.jpg\"><br><strong>预览窗口。</strong><font color=\"#A9A9A9\">点击Tab↹键前进一个窗口，前进直到您要预览的窗口显示在屏幕上。</font><br><br><br><img src=\"/Preview-a-Window-Before-You-Open-It/9.jpg\"><br><strong>返回到你之前工作的窗口。</strong><font color=\"#A9A9A9\">使用Tab↹键返回到您之前工作的窗口，并释放⊞Win键。</font></p>"},{"title":"DjangoUEditor任意文件上传漏洞分析","date":"2018-05-18T17:27:03.000Z","_content":"<div align=\"center\">{% asset_img 0.jpg%}</div>\nDjango是Python世界最有影响力的web框架。\n\nDjangoUeditor是一款可以在Django应用中集成百度Ueditor HTML编辑器的插件（Ueditor HTML编辑器是百度开源的在线HTML编辑器）。\n\nDjangoUeditor插件上存在一个漏洞，可以导致任意文件上传。\n<!--more-->\n</br>\n\n### 影响版本\nDjangoUeditor < 1.9.143\n</br>\n### 漏洞分析\n最近在学习分析python web框架方面的漏洞，恰好看到了WooYun 上2015年的一个关于DjangoUeditor的漏洞，就拿来分析一下。\n\n不要看这个漏洞距今已经快两年了，笔者认为这个漏洞还是有分析的价值的，因为DjangoUeditor作为一个由百度开发的富文本编辑器Ueditor移植到Django中的组件，它的使用率还是挺高的；再者，DjangoUeditor于2015年1月17号后，再也没有更新过，见github上作者的说明：\n<div align=\"center\">{% asset_img 1.jpg%}</div>\n经笔者测试，现在可以下载使用的1.9.143版本中，依然存在着这个漏洞。因此这个漏洞依然有着一定的影响的。\n\n下面开始正式分析下这个漏洞，根据wooyun上的说明，可以在利用这个插件进行上传图片时，改变imagePathFormat变量的值，即可上传任意文件。\n\n搭建好环境后，来看一下后台的样式，如下图所示\n<div align=\"center\">{% asset_img 2.jpg%}</div>\n我们来传一张图片并抓包看一下，如下图所示：\n<div align=\"center\">{% asset_img 3.jpg%}</div>\n注意图中两处红圈处，其中一处便是wooyun中提到的imagePathFormat参数，另一处action参数，这个参数在下文中会用到。\n\n可以看出，当上传一个图片（或者是文件）时候，POST提交的路径是/ueditor/controller/，我们看看DjangoUeditor的路由怎么定义的，来看一下后台代码DjangoUeditor/urls.py\n```python\n#coding:utf-8\nfrom django import VERSION\nif VERSION[0:2]>(1,3):\n    from django.conf.urls import patterns, url\nelse:\n    from django.conf.urls.defaults import patterns, url\n\nfrom views import get_ueditor_controller\nurlpatterns = patterns('',\n    url(r'^controller/$',get_ueditor_controller)\n)\n```\n从urls.py中可以看到，路由定义到views.py中的get_ueditor_controller方法上去了\n接下来跟到views.py中去，找到get_ueditor_controller方法\n```python\ndef get_ueditor_controller(request):\n    \"\"\"获取ueditor的后端URL地址    \"\"\"\n    action=request.GET.get(\"action\",\"\")\n    reponseAction={\n        \"config\":get_ueditor_settings,\n        \"uploadimage\":UploadFile,\n        \"uploadscrawl\":UploadFile,\n        \"uploadvideo\":UploadFile,\n        \"uploadfile\":UploadFile,\n        \"catchimage\":catcher_remote_image,\n        \"listimage\":list_files,\n        \"listfile\":list_files\n    }\n    return reponseAction[action](request)\n```\n传入的action参数值是uploadimage，因此接下来return进入对应的UploadFile方法\n\n跟到UploadFile方法中看一看（已省略中间若干代码）\n```python\nef UploadFile(request):\n    \"\"\"上传文件\"\"\"\n    。。。。。。。。。。。。。。。。\n   \n    #检测保存路径是否存在,如果不存在则需要创建\n    upload_path_format={\n        \"uploadfile\":\"filePathFormat\",\n        \"uploadimage\":\"imagePathFormat\",\n        \"uploadscrawl\":\"scrawlPathFormat\",\n        \"uploadvideo\":\"videoPathFormat\"\n    }\n\n    path_format_var=get_path_format_vars()\n    path_format_var.update({\n        \"basename\":upload_original_name,\n        \"extname\":upload_original_ext[1:],\n        \"filename\":upload_file_name,\n    })\n    #取得输出文件的路径  OutputPathFormat,OutputPath,OutputFile=get_output_path(request,upload_path_format[action],path_format_var)\n```\n注意最后一行，在这里调用了一个get_output_path方法来获得输出文件路径以及各式话后的文件名。\n\n为什么要注意这个get_output_path方法呢？回想一下，这个漏洞注入点是什么？是imagePathFormat参数，这里传入get_output_path方法的第二个参数upload_path_format[action]值是什么？见下图。\n<div align=\"center\">{% asset_img 4.jpg%}</div>\n当action参数值是uploadimage时，upload_path_format[action]值为 imagePathFormat，imagePathFormat将作为第二个参数的值进入get_output_path方法。\n\n接下来跟进get_output_path方法\n```python\ndef get_output_path(request,path_format,path_format_var):\n    #取得输出文件的路径\n    OutputPathFormat=(request.GET.get(path_format,USettings.UEditorSettings[\"defaultPathFormat\"]) % path_format_var).replace(\"\\\\\",\"/\")\n    OutputPath,OutputFile=os.path.split(OutputPathFormat)\n    OutputPath=os.path.join(USettings.gSettings.MEDIA_ROOT,OutputPath)\n    if not OutputFile:#如果OutputFile为空说明传入的OutputPathFormat没有包含文件名，因此需要用默认的文件名\n        OutputFile=USettings.UEditorSettings[\"defaultPathFormat\"] % path_format_var\n        OutputPathFormat=os.path.join(OutputPathFormat,OutputFile)\n    if not os.path.exists(OutputPath):\n        os.makedirs(OutputPath)\n    return ( OutputPathFormat,OutputPath,OutputFile)\n```\n现在path_format的值为imagePathFormat，django中的request.GET.get()方法可以跟两个参数，如果get中可以取得第一个参数的值，则使用第一个的值，如果取不到，则使用第二个配置到的默认值。经过处理后OutputPathFormat的值为uploads/images。\n\n接下来用os.path.split来将路径和文件名分割，然后分别赋值给OutputPath,OutputFile\n\n下面就到了漏洞存在的地方了，往下看，下面会判断OutputFile是否为空，为空的话就用标准模板进行格式化，我们这里OutputFile显然为空，最终的文件名会返回一个格式化的名字，如下图\n<div align=\"center\">{% asset_img 5.jpg%}</div>\n具体格式化方法如下：\n```python\ndef get_path_format_vars():\n    return {\n        \"year\":datetime.datetime.now().strftime(\"%Y\"),\n        \"month\":datetime.datetime.now().strftime(\"%m\"),\n        \"day\":datetime.datetime.now().strftime(\"%d\"),\n        \"date\": datetime.datetime.now().strftime(\"%Y%m%d\"),\n        \"time\":datetime.datetime.now().strftime(\"%H%M%S\"),\n        \"datetime\":datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\"),\n        \"rnd\":random.randrange(100,999)\n    }\n```\n但是，如果我们构造的imagePathFormat参数中的值不是一个单纯的路径，而是一个包含文件名的参数呢？（如imagePathFormat = uploads%2Fimages%2Fhehehe.xxxx）\n显而易见，OutputFile就是我们构造的hehehe.xxxx。\n验证如下\n<div align=\"center\">{% asset_img 6.jpg%}</div>\n经验证，写入的路径也是可以控制的，不仅限于images路径，并且可以覆盖其他的文件。\n</br>\n### 修补防御\n可以通过修改代码，对用户上传的OutputFile类型进行过滤，只允许符合要求的类型进行上传。\n\n","source":"_posts/diango.md","raw":"---\ntitle: DjangoUEditor任意文件上传漏洞分析\ndate: 2018-05-19 01:27:03\ntags: web漏洞分析\ncategories: 技术\n---\n<div align=\"center\">{% asset_img 0.jpg%}</div>\nDjango是Python世界最有影响力的web框架。\n\nDjangoUeditor是一款可以在Django应用中集成百度Ueditor HTML编辑器的插件（Ueditor HTML编辑器是百度开源的在线HTML编辑器）。\n\nDjangoUeditor插件上存在一个漏洞，可以导致任意文件上传。\n<!--more-->\n</br>\n\n### 影响版本\nDjangoUeditor < 1.9.143\n</br>\n### 漏洞分析\n最近在学习分析python web框架方面的漏洞，恰好看到了WooYun 上2015年的一个关于DjangoUeditor的漏洞，就拿来分析一下。\n\n不要看这个漏洞距今已经快两年了，笔者认为这个漏洞还是有分析的价值的，因为DjangoUeditor作为一个由百度开发的富文本编辑器Ueditor移植到Django中的组件，它的使用率还是挺高的；再者，DjangoUeditor于2015年1月17号后，再也没有更新过，见github上作者的说明：\n<div align=\"center\">{% asset_img 1.jpg%}</div>\n经笔者测试，现在可以下载使用的1.9.143版本中，依然存在着这个漏洞。因此这个漏洞依然有着一定的影响的。\n\n下面开始正式分析下这个漏洞，根据wooyun上的说明，可以在利用这个插件进行上传图片时，改变imagePathFormat变量的值，即可上传任意文件。\n\n搭建好环境后，来看一下后台的样式，如下图所示\n<div align=\"center\">{% asset_img 2.jpg%}</div>\n我们来传一张图片并抓包看一下，如下图所示：\n<div align=\"center\">{% asset_img 3.jpg%}</div>\n注意图中两处红圈处，其中一处便是wooyun中提到的imagePathFormat参数，另一处action参数，这个参数在下文中会用到。\n\n可以看出，当上传一个图片（或者是文件）时候，POST提交的路径是/ueditor/controller/，我们看看DjangoUeditor的路由怎么定义的，来看一下后台代码DjangoUeditor/urls.py\n```python\n#coding:utf-8\nfrom django import VERSION\nif VERSION[0:2]>(1,3):\n    from django.conf.urls import patterns, url\nelse:\n    from django.conf.urls.defaults import patterns, url\n\nfrom views import get_ueditor_controller\nurlpatterns = patterns('',\n    url(r'^controller/$',get_ueditor_controller)\n)\n```\n从urls.py中可以看到，路由定义到views.py中的get_ueditor_controller方法上去了\n接下来跟到views.py中去，找到get_ueditor_controller方法\n```python\ndef get_ueditor_controller(request):\n    \"\"\"获取ueditor的后端URL地址    \"\"\"\n    action=request.GET.get(\"action\",\"\")\n    reponseAction={\n        \"config\":get_ueditor_settings,\n        \"uploadimage\":UploadFile,\n        \"uploadscrawl\":UploadFile,\n        \"uploadvideo\":UploadFile,\n        \"uploadfile\":UploadFile,\n        \"catchimage\":catcher_remote_image,\n        \"listimage\":list_files,\n        \"listfile\":list_files\n    }\n    return reponseAction[action](request)\n```\n传入的action参数值是uploadimage，因此接下来return进入对应的UploadFile方法\n\n跟到UploadFile方法中看一看（已省略中间若干代码）\n```python\nef UploadFile(request):\n    \"\"\"上传文件\"\"\"\n    。。。。。。。。。。。。。。。。\n   \n    #检测保存路径是否存在,如果不存在则需要创建\n    upload_path_format={\n        \"uploadfile\":\"filePathFormat\",\n        \"uploadimage\":\"imagePathFormat\",\n        \"uploadscrawl\":\"scrawlPathFormat\",\n        \"uploadvideo\":\"videoPathFormat\"\n    }\n\n    path_format_var=get_path_format_vars()\n    path_format_var.update({\n        \"basename\":upload_original_name,\n        \"extname\":upload_original_ext[1:],\n        \"filename\":upload_file_name,\n    })\n    #取得输出文件的路径  OutputPathFormat,OutputPath,OutputFile=get_output_path(request,upload_path_format[action],path_format_var)\n```\n注意最后一行，在这里调用了一个get_output_path方法来获得输出文件路径以及各式话后的文件名。\n\n为什么要注意这个get_output_path方法呢？回想一下，这个漏洞注入点是什么？是imagePathFormat参数，这里传入get_output_path方法的第二个参数upload_path_format[action]值是什么？见下图。\n<div align=\"center\">{% asset_img 4.jpg%}</div>\n当action参数值是uploadimage时，upload_path_format[action]值为 imagePathFormat，imagePathFormat将作为第二个参数的值进入get_output_path方法。\n\n接下来跟进get_output_path方法\n```python\ndef get_output_path(request,path_format,path_format_var):\n    #取得输出文件的路径\n    OutputPathFormat=(request.GET.get(path_format,USettings.UEditorSettings[\"defaultPathFormat\"]) % path_format_var).replace(\"\\\\\",\"/\")\n    OutputPath,OutputFile=os.path.split(OutputPathFormat)\n    OutputPath=os.path.join(USettings.gSettings.MEDIA_ROOT,OutputPath)\n    if not OutputFile:#如果OutputFile为空说明传入的OutputPathFormat没有包含文件名，因此需要用默认的文件名\n        OutputFile=USettings.UEditorSettings[\"defaultPathFormat\"] % path_format_var\n        OutputPathFormat=os.path.join(OutputPathFormat,OutputFile)\n    if not os.path.exists(OutputPath):\n        os.makedirs(OutputPath)\n    return ( OutputPathFormat,OutputPath,OutputFile)\n```\n现在path_format的值为imagePathFormat，django中的request.GET.get()方法可以跟两个参数，如果get中可以取得第一个参数的值，则使用第一个的值，如果取不到，则使用第二个配置到的默认值。经过处理后OutputPathFormat的值为uploads/images。\n\n接下来用os.path.split来将路径和文件名分割，然后分别赋值给OutputPath,OutputFile\n\n下面就到了漏洞存在的地方了，往下看，下面会判断OutputFile是否为空，为空的话就用标准模板进行格式化，我们这里OutputFile显然为空，最终的文件名会返回一个格式化的名字，如下图\n<div align=\"center\">{% asset_img 5.jpg%}</div>\n具体格式化方法如下：\n```python\ndef get_path_format_vars():\n    return {\n        \"year\":datetime.datetime.now().strftime(\"%Y\"),\n        \"month\":datetime.datetime.now().strftime(\"%m\"),\n        \"day\":datetime.datetime.now().strftime(\"%d\"),\n        \"date\": datetime.datetime.now().strftime(\"%Y%m%d\"),\n        \"time\":datetime.datetime.now().strftime(\"%H%M%S\"),\n        \"datetime\":datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\"),\n        \"rnd\":random.randrange(100,999)\n    }\n```\n但是，如果我们构造的imagePathFormat参数中的值不是一个单纯的路径，而是一个包含文件名的参数呢？（如imagePathFormat = uploads%2Fimages%2Fhehehe.xxxx）\n显而易见，OutputFile就是我们构造的hehehe.xxxx。\n验证如下\n<div align=\"center\">{% asset_img 6.jpg%}</div>\n经验证，写入的路径也是可以控制的，不仅限于images路径，并且可以覆盖其他的文件。\n</br>\n### 修补防御\n可以通过修改代码，对用户上传的OutputFile类型进行过滤，只允许符合要求的类型进行上传。\n\n","slug":"diango","published":1,"updated":"2019-09-24T09:46:39.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7ags0007kwa9lwwm7g8g","content":"<p><div align=\"center\"><img src=\"/diango/0.jpg\"></div><br>Django是Python世界最有影响力的web框架。</p>\n<p>DjangoUeditor是一款可以在Django应用中集成百度Ueditor HTML编辑器的插件（Ueditor HTML编辑器是百度开源的在线HTML编辑器）。</p>\n<p>DjangoUeditor插件上存在一个漏洞，可以导致任意文件上传。<br><a id=\"more\"></a><br><br></p>\n<h3 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h3><p>DjangoUeditor &lt; 1.9.143<br><br></p>\n<h3 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h3><p>最近在学习分析python web框架方面的漏洞，恰好看到了WooYun 上2015年的一个关于DjangoUeditor的漏洞，就拿来分析一下。</p>\n<p>不要看这个漏洞距今已经快两年了，笔者认为这个漏洞还是有分析的价值的，因为DjangoUeditor作为一个由百度开发的富文本编辑器Ueditor移植到Django中的组件，它的使用率还是挺高的；再者，DjangoUeditor于2015年1月17号后，再也没有更新过，见github上作者的说明：</p>\n<p><div align=\"center\"><img src=\"/diango/1.jpg\"></div><br>经笔者测试，现在可以下载使用的1.9.143版本中，依然存在着这个漏洞。因此这个漏洞依然有着一定的影响的。</p>\n<p>下面开始正式分析下这个漏洞，根据wooyun上的说明，可以在利用这个插件进行上传图片时，改变imagePathFormat变量的值，即可上传任意文件。</p>\n<p>搭建好环境后，来看一下后台的样式，如下图所示</p>\n<p><div align=\"center\"><img src=\"/diango/2.jpg\"></div><br>我们来传一张图片并抓包看一下，如下图所示：</p>\n<p><div align=\"center\"><img src=\"/diango/3.jpg\"></div><br>注意图中两处红圈处，其中一处便是wooyun中提到的imagePathFormat参数，另一处action参数，这个参数在下文中会用到。</p>\n<p>可以看出，当上传一个图片（或者是文件）时候，POST提交的路径是/ueditor/controller/，我们看看DjangoUeditor的路由怎么定义的，来看一下后台代码DjangoUeditor/urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> VERSION</span><br><span class=\"line\"><span class=\"keyword\">if</span> VERSION[<span class=\"number\">0</span>:<span class=\"number\">2</span>]&gt;(<span class=\"number\">1</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> patterns, url</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf.urls.defaults <span class=\"keyword\">import</span> patterns, url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> get_ueditor_controller</span><br><span class=\"line\">urlpatterns = patterns(<span class=\"string\">''</span>,</span><br><span class=\"line\">    url(<span class=\"string\">r'^controller/$'</span>,get_ueditor_controller)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>从urls.py中可以看到，路由定义到views.py中的get_ueditor_controller方法上去了<br>接下来跟到views.py中去，找到get_ueditor_controller方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ueditor_controller</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"获取ueditor的后端URL地址    \"\"\"</span></span><br><span class=\"line\">    action=request.GET.get(<span class=\"string\">\"action\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    reponseAction=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"config\"</span>:get_ueditor_settings,</span><br><span class=\"line\">        <span class=\"string\">\"uploadimage\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadscrawl\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadvideo\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadfile\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"catchimage\"</span>:catcher_remote_image,</span><br><span class=\"line\">        <span class=\"string\">\"listimage\"</span>:list_files,</span><br><span class=\"line\">        <span class=\"string\">\"listfile\"</span>:list_files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reponseAction[action](request)</span><br></pre></td></tr></table></figure></p>\n<p>传入的action参数值是uploadimage，因此接下来return进入对应的UploadFile方法</p>\n<p>跟到UploadFile方法中看一看（已省略中间若干代码）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ef UploadFile(request):</span><br><span class=\"line\">    <span class=\"string\">\"\"\"上传文件\"\"\"</span></span><br><span class=\"line\">    。。。。。。。。。。。。。。。。</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#检测保存路径是否存在,如果不存在则需要创建</span></span><br><span class=\"line\">    upload_path_format=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"uploadfile\"</span>:<span class=\"string\">\"filePathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadimage\"</span>:<span class=\"string\">\"imagePathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadscrawl\"</span>:<span class=\"string\">\"scrawlPathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadvideo\"</span>:<span class=\"string\">\"videoPathFormat\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    path_format_var=get_path_format_vars()</span><br><span class=\"line\">    path_format_var.update(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"basename\"</span>:upload_original_name,</span><br><span class=\"line\">        <span class=\"string\">\"extname\"</span>:upload_original_ext[<span class=\"number\">1</span>:],</span><br><span class=\"line\">        <span class=\"string\">\"filename\"</span>:upload_file_name,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">#取得输出文件的路径  OutputPathFormat,OutputPath,OutputFile=get_output_path(request,upload_path_format[action],path_format_var)</span></span><br></pre></td></tr></table></figure></p>\n<p>注意最后一行，在这里调用了一个get_output_path方法来获得输出文件路径以及各式话后的文件名。</p>\n<p>为什么要注意这个get_output_path方法呢？回想一下，这个漏洞注入点是什么？是imagePathFormat参数，这里传入get_output_path方法的第二个参数upload_path_format[action]值是什么？见下图。</p>\n<p><div align=\"center\"><img src=\"/diango/4.jpg\"></div><br>当action参数值是uploadimage时，upload_path_format[action]值为 imagePathFormat，imagePathFormat将作为第二个参数的值进入get_output_path方法。</p>\n<p>接下来跟进get_output_path方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_output_path</span><span class=\"params\">(request,path_format,path_format_var)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#取得输出文件的路径</span></span><br><span class=\"line\">    OutputPathFormat=(request.GET.get(path_format,USettings.UEditorSettings[<span class=\"string\">\"defaultPathFormat\"</span>]) % path_format_var).replace(<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    OutputPath,OutputFile=os.path.split(OutputPathFormat)</span><br><span class=\"line\">    OutputPath=os.path.join(USettings.gSettings.MEDIA_ROOT,OutputPath)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> OutputFile:<span class=\"comment\">#如果OutputFile为空说明传入的OutputPathFormat没有包含文件名，因此需要用默认的文件名</span></span><br><span class=\"line\">        OutputFile=USettings.UEditorSettings[<span class=\"string\">\"defaultPathFormat\"</span>] % path_format_var</span><br><span class=\"line\">        OutputPathFormat=os.path.join(OutputPathFormat,OutputFile)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(OutputPath):</span><br><span class=\"line\">        os.makedirs(OutputPath)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ( OutputPathFormat,OutputPath,OutputFile)</span><br></pre></td></tr></table></figure></p>\n<p>现在path_format的值为imagePathFormat，django中的request.GET.get()方法可以跟两个参数，如果get中可以取得第一个参数的值，则使用第一个的值，如果取不到，则使用第二个配置到的默认值。经过处理后OutputPathFormat的值为uploads/images。</p>\n<p>接下来用os.path.split来将路径和文件名分割，然后分别赋值给OutputPath,OutputFile</p>\n<p>下面就到了漏洞存在的地方了，往下看，下面会判断OutputFile是否为空，为空的话就用标准模板进行格式化，我们这里OutputFile显然为空，最终的文件名会返回一个格式化的名字，如下图</p>\n<p><div align=\"center\"><img src=\"/diango/5.jpg\"></div><br>具体格式化方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_path_format_vars</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"year\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%Y\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"month\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%m\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"day\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%d\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"date\"</span>: datetime.datetime.now().strftime(<span class=\"string\">\"%Y%m%d\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"time\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%H%M%S\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"datetime\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%Y%m%d%H%M%S\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"rnd\"</span>:random.randrange(<span class=\"number\">100</span>,<span class=\"number\">999</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，如果我们构造的imagePathFormat参数中的值不是一个单纯的路径，而是一个包含文件名的参数呢？（如imagePathFormat = uploads%2Fimages%2Fhehehe.xxxx）<br>显而易见，OutputFile就是我们构造的hehehe.xxxx。<br>验证如下</p>\n<p><div align=\"center\"><img src=\"/diango/6.jpg\"></div><br>经验证，写入的路径也是可以控制的，不仅限于images路径，并且可以覆盖其他的文件。<br><br></p>\n<h3 id=\"修补防御\"><a href=\"#修补防御\" class=\"headerlink\" title=\"修补防御\"></a>修补防御</h3><p>可以通过修改代码，对用户上传的OutputFile类型进行过滤，只允许符合要求的类型进行上传。</p>\n","site":{"data":{}},"excerpt":"<p><div align=\"center\"><img src=\"/diango/0.jpg\"></div><br>Django是Python世界最有影响力的web框架。</p>\n<p>DjangoUeditor是一款可以在Django应用中集成百度Ueditor HTML编辑器的插件（Ueditor HTML编辑器是百度开源的在线HTML编辑器）。</p>\n<p>DjangoUeditor插件上存在一个漏洞，可以导致任意文件上传。<br>","more":"<br><br></p>\n<h3 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h3><p>DjangoUeditor &lt; 1.9.143<br><br></p>\n<h3 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h3><p>最近在学习分析python web框架方面的漏洞，恰好看到了WooYun 上2015年的一个关于DjangoUeditor的漏洞，就拿来分析一下。</p>\n<p>不要看这个漏洞距今已经快两年了，笔者认为这个漏洞还是有分析的价值的，因为DjangoUeditor作为一个由百度开发的富文本编辑器Ueditor移植到Django中的组件，它的使用率还是挺高的；再者，DjangoUeditor于2015年1月17号后，再也没有更新过，见github上作者的说明：</p>\n<p><div align=\"center\"><img src=\"/diango/1.jpg\"></div><br>经笔者测试，现在可以下载使用的1.9.143版本中，依然存在着这个漏洞。因此这个漏洞依然有着一定的影响的。</p>\n<p>下面开始正式分析下这个漏洞，根据wooyun上的说明，可以在利用这个插件进行上传图片时，改变imagePathFormat变量的值，即可上传任意文件。</p>\n<p>搭建好环境后，来看一下后台的样式，如下图所示</p>\n<p><div align=\"center\"><img src=\"/diango/2.jpg\"></div><br>我们来传一张图片并抓包看一下，如下图所示：</p>\n<p><div align=\"center\"><img src=\"/diango/3.jpg\"></div><br>注意图中两处红圈处，其中一处便是wooyun中提到的imagePathFormat参数，另一处action参数，这个参数在下文中会用到。</p>\n<p>可以看出，当上传一个图片（或者是文件）时候，POST提交的路径是/ueditor/controller/，我们看看DjangoUeditor的路由怎么定义的，来看一下后台代码DjangoUeditor/urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> VERSION</span><br><span class=\"line\"><span class=\"keyword\">if</span> VERSION[<span class=\"number\">0</span>:<span class=\"number\">2</span>]&gt;(<span class=\"number\">1</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> patterns, url</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf.urls.defaults <span class=\"keyword\">import</span> patterns, url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> get_ueditor_controller</span><br><span class=\"line\">urlpatterns = patterns(<span class=\"string\">''</span>,</span><br><span class=\"line\">    url(<span class=\"string\">r'^controller/$'</span>,get_ueditor_controller)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>从urls.py中可以看到，路由定义到views.py中的get_ueditor_controller方法上去了<br>接下来跟到views.py中去，找到get_ueditor_controller方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ueditor_controller</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"获取ueditor的后端URL地址    \"\"\"</span></span><br><span class=\"line\">    action=request.GET.get(<span class=\"string\">\"action\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    reponseAction=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"config\"</span>:get_ueditor_settings,</span><br><span class=\"line\">        <span class=\"string\">\"uploadimage\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadscrawl\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadvideo\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"uploadfile\"</span>:UploadFile,</span><br><span class=\"line\">        <span class=\"string\">\"catchimage\"</span>:catcher_remote_image,</span><br><span class=\"line\">        <span class=\"string\">\"listimage\"</span>:list_files,</span><br><span class=\"line\">        <span class=\"string\">\"listfile\"</span>:list_files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reponseAction[action](request)</span><br></pre></td></tr></table></figure></p>\n<p>传入的action参数值是uploadimage，因此接下来return进入对应的UploadFile方法</p>\n<p>跟到UploadFile方法中看一看（已省略中间若干代码）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ef UploadFile(request):</span><br><span class=\"line\">    <span class=\"string\">\"\"\"上传文件\"\"\"</span></span><br><span class=\"line\">    。。。。。。。。。。。。。。。。</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#检测保存路径是否存在,如果不存在则需要创建</span></span><br><span class=\"line\">    upload_path_format=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"uploadfile\"</span>:<span class=\"string\">\"filePathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadimage\"</span>:<span class=\"string\">\"imagePathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadscrawl\"</span>:<span class=\"string\">\"scrawlPathFormat\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"uploadvideo\"</span>:<span class=\"string\">\"videoPathFormat\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    path_format_var=get_path_format_vars()</span><br><span class=\"line\">    path_format_var.update(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"basename\"</span>:upload_original_name,</span><br><span class=\"line\">        <span class=\"string\">\"extname\"</span>:upload_original_ext[<span class=\"number\">1</span>:],</span><br><span class=\"line\">        <span class=\"string\">\"filename\"</span>:upload_file_name,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">#取得输出文件的路径  OutputPathFormat,OutputPath,OutputFile=get_output_path(request,upload_path_format[action],path_format_var)</span></span><br></pre></td></tr></table></figure></p>\n<p>注意最后一行，在这里调用了一个get_output_path方法来获得输出文件路径以及各式话后的文件名。</p>\n<p>为什么要注意这个get_output_path方法呢？回想一下，这个漏洞注入点是什么？是imagePathFormat参数，这里传入get_output_path方法的第二个参数upload_path_format[action]值是什么？见下图。</p>\n<p><div align=\"center\"><img src=\"/diango/4.jpg\"></div><br>当action参数值是uploadimage时，upload_path_format[action]值为 imagePathFormat，imagePathFormat将作为第二个参数的值进入get_output_path方法。</p>\n<p>接下来跟进get_output_path方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_output_path</span><span class=\"params\">(request,path_format,path_format_var)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#取得输出文件的路径</span></span><br><span class=\"line\">    OutputPathFormat=(request.GET.get(path_format,USettings.UEditorSettings[<span class=\"string\">\"defaultPathFormat\"</span>]) % path_format_var).replace(<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    OutputPath,OutputFile=os.path.split(OutputPathFormat)</span><br><span class=\"line\">    OutputPath=os.path.join(USettings.gSettings.MEDIA_ROOT,OutputPath)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> OutputFile:<span class=\"comment\">#如果OutputFile为空说明传入的OutputPathFormat没有包含文件名，因此需要用默认的文件名</span></span><br><span class=\"line\">        OutputFile=USettings.UEditorSettings[<span class=\"string\">\"defaultPathFormat\"</span>] % path_format_var</span><br><span class=\"line\">        OutputPathFormat=os.path.join(OutputPathFormat,OutputFile)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(OutputPath):</span><br><span class=\"line\">        os.makedirs(OutputPath)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ( OutputPathFormat,OutputPath,OutputFile)</span><br></pre></td></tr></table></figure></p>\n<p>现在path_format的值为imagePathFormat，django中的request.GET.get()方法可以跟两个参数，如果get中可以取得第一个参数的值，则使用第一个的值，如果取不到，则使用第二个配置到的默认值。经过处理后OutputPathFormat的值为uploads/images。</p>\n<p>接下来用os.path.split来将路径和文件名分割，然后分别赋值给OutputPath,OutputFile</p>\n<p>下面就到了漏洞存在的地方了，往下看，下面会判断OutputFile是否为空，为空的话就用标准模板进行格式化，我们这里OutputFile显然为空，最终的文件名会返回一个格式化的名字，如下图</p>\n<p><div align=\"center\"><img src=\"/diango/5.jpg\"></div><br>具体格式化方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_path_format_vars</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"year\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%Y\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"month\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%m\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"day\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%d\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"date\"</span>: datetime.datetime.now().strftime(<span class=\"string\">\"%Y%m%d\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"time\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%H%M%S\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"datetime\"</span>:datetime.datetime.now().strftime(<span class=\"string\">\"%Y%m%d%H%M%S\"</span>),</span><br><span class=\"line\">        <span class=\"string\">\"rnd\"</span>:random.randrange(<span class=\"number\">100</span>,<span class=\"number\">999</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，如果我们构造的imagePathFormat参数中的值不是一个单纯的路径，而是一个包含文件名的参数呢？（如imagePathFormat = uploads%2Fimages%2Fhehehe.xxxx）<br>显而易见，OutputFile就是我们构造的hehehe.xxxx。<br>验证如下</p>\n<p><div align=\"center\"><img src=\"/diango/6.jpg\"></div><br>经验证，写入的路径也是可以控制的，不仅限于images路径，并且可以覆盖其他的文件。<br><br></p>\n<h3 id=\"修补防御\"><a href=\"#修补防御\" class=\"headerlink\" title=\"修补防御\"></a>修补防御</h3><p>可以通过修改代码，对用户上传的OutputFile类型进行过滤，只允许符合要求的类型进行上传。</p>"},{"title":"震惊！Hexo+github创建个人博客避坑攻略","date":"2017-05-18T11:31:00.000Z","_content":"<div align=center>\n{% asset_img 0.jpeg%}\n</div>\nI have a dream！我要有个<font color=#FF7F50>免费</font>blog！\n\n使用hexo + github + theme，建立一个自己的blog并非困难，网上的相关资料很多，也很详细。\n\n具体的搭建过程可以参照这个链接: https://zhuanlan.zhihu.com/p/22191919。\n\n另外附上hexo的官方文档链接: https://hexo.io/zh-cn/docs/。\n\n很easy吧！很刺激吧！震惊吧！在读完上面的搭建过程后，如果后仍有兴趣搭建一个自己的Glog，在动手前，请先看看我这篇文章。\n\n这篇文章重点<font color=#FF7F50>不是</font>教你如何建立博客，而是写一点我实战中遇到的坑，好让大家避开坑。下面我要开始讲讲怎么<font color=#FF7F50>避坑</font>了。\n<!--more-->\n</br>  \n### 项目命名问题\n<div align=center>\n{% asset_img 1.png%}\n</div>\n我嫌原作者画的圈不够粗，重新在这里强调一下，这个项目的命名一定要是<font color=#FF7F50>你的github账号名</font>.github.io，要不github一定狠狠地把404甩你脸上。\n\n这个项目名称也是作为你blog建立起来后访问的网址，如果嫌你github名字起的太随意，先改一下自己的github账户名再来建项目。\n\nGithub改账户名在下图这里\n<div align=center>\n{% asset_img 2.png%}\n</div>\n<div align=center>\n{% asset_img 3.png%}\n</div>\n</br>\n### 在不同电脑上更新博客\n你需要在公司和家里两台电脑上更新博客，虽然说hexo控制端是在本地工作的的，但是你在公司电脑上新生成了一个文章，hexo d发布了，回家后，一不小心在电脑上hexo d 了一下，家里电脑中并没有你新生成的文章的md文件。结果是blog上内容又还原到你家里电脑中的状态了。\n惊喜不！\n其实解决办法很简单，把hexo控制端也放到你的项目里作为一个分支，完成修改时候push下，然后用的时候pull一下就可以了，方法如下:\n```\n在你项目里创建一个分支：hexo，这时候你的这个项目里就有两个分支了，master放hexo生成的静态网站，hexo放你的hexo控制端代码\n把项目hexo分支克隆到你用的几台机器上，切到hexo分支\n每次要用hexo控制端时，先pull下最新的commit\n删除目录下.deploy_git/（这个是个大坑，有时hexo d会出冲突，这个默认是隐藏的，ubuntu可以用ll指令显示）\n开始你的表演（写文章或是其他的。。。）\n当决定要结束这台机器上的创作了，依次执行git add .、git commit -m \"...\"、git push hexo提交控制端变动；\n```\n</br>\n### theme的选择与使用\n先附上hexo的主题链接: https://hexo.io/themes/\n\n选择一个你喜欢的主题，进入对应的github项目中clone这个主题到本地themes文件夹中并分别在hexo的_config.yml和主题的_config.yml中配置相关配置。\n\n这里的坑是，如果直接将中意的主题git clone到你的themes文件夹中，假如你的hexo控制端文件夹本来就是个git项目，这个项目里的themes文件夹里又嵌套了个git项目，就会导致被嵌套的git仓库的改动，不能被大git仓库检测到。这样最直观的\n\n针对这种问题，可以直接把主题中的.git/文件删除，或者直接下载项目的压缩包然后在themes文件夹中解压。\n</br>\n### md文件的修改与编写\nhexo使用markdown来编辑文章，在markdown中，可以用#来标识几级标题。\n但是在我写这篇文章时，发现###标题###没有被解析，原封不动的被打印出来了，如过出现这种情况，请记得试试在#与标题文字之间加一个空格，这种情况同样适用于_config.yml配置文件的修改中，参数和值之间的空格千万别忘记了（如source_dir: source之间的空格）\n\n\n\n\n","source":"_posts/hexohelp.md","raw":"---\ntitle: 震惊！Hexo+github创建个人博客避坑攻略\ndate: 2017-05-18 19:31:00\ntags: 技术分享\ncategories: 技术\n---\n<div align=center>\n{% asset_img 0.jpeg%}\n</div>\nI have a dream！我要有个<font color=#FF7F50>免费</font>blog！\n\n使用hexo + github + theme，建立一个自己的blog并非困难，网上的相关资料很多，也很详细。\n\n具体的搭建过程可以参照这个链接: https://zhuanlan.zhihu.com/p/22191919。\n\n另外附上hexo的官方文档链接: https://hexo.io/zh-cn/docs/。\n\n很easy吧！很刺激吧！震惊吧！在读完上面的搭建过程后，如果后仍有兴趣搭建一个自己的Glog，在动手前，请先看看我这篇文章。\n\n这篇文章重点<font color=#FF7F50>不是</font>教你如何建立博客，而是写一点我实战中遇到的坑，好让大家避开坑。下面我要开始讲讲怎么<font color=#FF7F50>避坑</font>了。\n<!--more-->\n</br>  \n### 项目命名问题\n<div align=center>\n{% asset_img 1.png%}\n</div>\n我嫌原作者画的圈不够粗，重新在这里强调一下，这个项目的命名一定要是<font color=#FF7F50>你的github账号名</font>.github.io，要不github一定狠狠地把404甩你脸上。\n\n这个项目名称也是作为你blog建立起来后访问的网址，如果嫌你github名字起的太随意，先改一下自己的github账户名再来建项目。\n\nGithub改账户名在下图这里\n<div align=center>\n{% asset_img 2.png%}\n</div>\n<div align=center>\n{% asset_img 3.png%}\n</div>\n</br>\n### 在不同电脑上更新博客\n你需要在公司和家里两台电脑上更新博客，虽然说hexo控制端是在本地工作的的，但是你在公司电脑上新生成了一个文章，hexo d发布了，回家后，一不小心在电脑上hexo d 了一下，家里电脑中并没有你新生成的文章的md文件。结果是blog上内容又还原到你家里电脑中的状态了。\n惊喜不！\n其实解决办法很简单，把hexo控制端也放到你的项目里作为一个分支，完成修改时候push下，然后用的时候pull一下就可以了，方法如下:\n```\n在你项目里创建一个分支：hexo，这时候你的这个项目里就有两个分支了，master放hexo生成的静态网站，hexo放你的hexo控制端代码\n把项目hexo分支克隆到你用的几台机器上，切到hexo分支\n每次要用hexo控制端时，先pull下最新的commit\n删除目录下.deploy_git/（这个是个大坑，有时hexo d会出冲突，这个默认是隐藏的，ubuntu可以用ll指令显示）\n开始你的表演（写文章或是其他的。。。）\n当决定要结束这台机器上的创作了，依次执行git add .、git commit -m \"...\"、git push hexo提交控制端变动；\n```\n</br>\n### theme的选择与使用\n先附上hexo的主题链接: https://hexo.io/themes/\n\n选择一个你喜欢的主题，进入对应的github项目中clone这个主题到本地themes文件夹中并分别在hexo的_config.yml和主题的_config.yml中配置相关配置。\n\n这里的坑是，如果直接将中意的主题git clone到你的themes文件夹中，假如你的hexo控制端文件夹本来就是个git项目，这个项目里的themes文件夹里又嵌套了个git项目，就会导致被嵌套的git仓库的改动，不能被大git仓库检测到。这样最直观的\n\n针对这种问题，可以直接把主题中的.git/文件删除，或者直接下载项目的压缩包然后在themes文件夹中解压。\n</br>\n### md文件的修改与编写\nhexo使用markdown来编辑文章，在markdown中，可以用#来标识几级标题。\n但是在我写这篇文章时，发现###标题###没有被解析，原封不动的被打印出来了，如过出现这种情况，请记得试试在#与标题文字之间加一个空格，这种情况同样适用于_config.yml配置文件的修改中，参数和值之间的空格千万别忘记了（如source_dir: source之间的空格）\n\n\n\n\n","slug":"hexohelp","published":1,"updated":"2019-09-24T07:15:14.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7agu0008kwa9rrgxh6w1","content":"<p><div align=\"center\"><br><img src=\"/hexohelp/0.jpeg\"><br></div><br>I have a dream！我要有个<font color=\"#FF7F50\">免费</font>blog！</p>\n<p>使用hexo + github + theme，建立一个自己的blog并非困难，网上的相关资料很多，也很详细。</p>\n<p>具体的搭建过程可以参照这个链接: <a href=\"https://zhuanlan.zhihu.com/p/22191919。\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22191919。</a></p>\n<p>另外附上hexo的官方文档链接: <a href=\"https://hexo.io/zh-cn/docs/。\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/。</a></p>\n<p>很easy吧！很刺激吧！震惊吧！在读完上面的搭建过程后，如果后仍有兴趣搭建一个自己的Glog，在动手前，请先看看我这篇文章。</p>\n<p>这篇文章重点<font color=\"#FF7F50\">不是</font>教你如何建立博客，而是写一点我实战中遇到的坑，好让大家避开坑。下面我要开始讲讲怎么<font color=\"#FF7F50\">避坑</font>了。<br><a id=\"more\"></a><br><br>  </p>\n<h3 id=\"项目命名问题\"><a href=\"#项目命名问题\" class=\"headerlink\" title=\"项目命名问题\"></a>项目命名问题</h3><p><div align=\"center\"><br><img src=\"/hexohelp/1.png\"><br></div><br>我嫌原作者画的圈不够粗，重新在这里强调一下，这个项目的命名一定要是<font color=\"#FF7F50\">你的github账号名</font>.github.io，要不github一定狠狠地把404甩你脸上。</p>\n<p>这个项目名称也是作为你blog建立起来后访问的网址，如果嫌你github名字起的太随意，先改一下自己的github账户名再来建项目。</p>\n<p>Github改账户名在下图这里</p>\n<p><div align=\"center\"><br><img src=\"/hexohelp/2.png\"><br></div></p>\n<p><div align=\"center\"><br><img src=\"/hexohelp/3.png\"><br></div><br><br></p>\n<h3 id=\"在不同电脑上更新博客\"><a href=\"#在不同电脑上更新博客\" class=\"headerlink\" title=\"在不同电脑上更新博客\"></a>在不同电脑上更新博客</h3><p>你需要在公司和家里两台电脑上更新博客，虽然说hexo控制端是在本地工作的的，但是你在公司电脑上新生成了一个文章，hexo d发布了，回家后，一不小心在电脑上hexo d 了一下，家里电脑中并没有你新生成的文章的md文件。结果是blog上内容又还原到你家里电脑中的状态了。<br>惊喜不！<br>其实解决办法很简单，把hexo控制端也放到你的项目里作为一个分支，完成修改时候push下，然后用的时候pull一下就可以了，方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在你项目里创建一个分支：hexo，这时候你的这个项目里就有两个分支了，master放hexo生成的静态网站，hexo放你的hexo控制端代码</span><br><span class=\"line\">把项目hexo分支克隆到你用的几台机器上，切到hexo分支</span><br><span class=\"line\">每次要用hexo控制端时，先pull下最新的commit</span><br><span class=\"line\">删除目录下.deploy_git/（这个是个大坑，有时hexo d会出冲突，这个默认是隐藏的，ubuntu可以用ll指令显示）</span><br><span class=\"line\">开始你的表演（写文章或是其他的。。。）</span><br><span class=\"line\">当决定要结束这台机器上的创作了，依次执行git add .、git commit -m &quot;...&quot;、git push hexo提交控制端变动；</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"theme的选择与使用\"><a href=\"#theme的选择与使用\" class=\"headerlink\" title=\"theme的选择与使用\"></a>theme的选择与使用</h3><p>先附上hexo的主题链接: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<p>选择一个你喜欢的主题，进入对应的github项目中clone这个主题到本地themes文件夹中并分别在hexo的_config.yml和主题的_config.yml中配置相关配置。</p>\n<p>这里的坑是，如果直接将中意的主题git clone到你的themes文件夹中，假如你的hexo控制端文件夹本来就是个git项目，这个项目里的themes文件夹里又嵌套了个git项目，就会导致被嵌套的git仓库的改动，不能被大git仓库检测到。这样最直观的</p>\n<p>针对这种问题，可以直接把主题中的.git/文件删除，或者直接下载项目的压缩包然后在themes文件夹中解压。<br><br></p>\n<h3 id=\"md文件的修改与编写\"><a href=\"#md文件的修改与编写\" class=\"headerlink\" title=\"md文件的修改与编写\"></a>md文件的修改与编写</h3><p>hexo使用markdown来编辑文章，在markdown中，可以用#来标识几级标题。<br>但是在我写这篇文章时，发现###标题###没有被解析，原封不动的被打印出来了，如过出现这种情况，请记得试试在#与标题文字之间加一个空格，这种情况同样适用于_config.yml配置文件的修改中，参数和值之间的空格千万别忘记了（如source_dir: source之间的空格）</p>\n","site":{"data":{}},"excerpt":"<p><div align=\"center\"><br><img src=\"/hexohelp/0.jpeg\"><br></div><br>I have a dream！我要有个<font color=\"#FF7F50\">免费</font>blog！</p>\n<p>使用hexo + github + theme，建立一个自己的blog并非困难，网上的相关资料很多，也很详细。</p>\n<p>具体的搭建过程可以参照这个链接: <a href=\"https://zhuanlan.zhihu.com/p/22191919。\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22191919。</a></p>\n<p>另外附上hexo的官方文档链接: <a href=\"https://hexo.io/zh-cn/docs/。\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/。</a></p>\n<p>很easy吧！很刺激吧！震惊吧！在读完上面的搭建过程后，如果后仍有兴趣搭建一个自己的Glog，在动手前，请先看看我这篇文章。</p>\n<p>这篇文章重点<font color=\"#FF7F50\">不是</font>教你如何建立博客，而是写一点我实战中遇到的坑，好让大家避开坑。下面我要开始讲讲怎么<font color=\"#FF7F50\">避坑</font>了。<br>","more":"<br><br>  </p>\n<h3 id=\"项目命名问题\"><a href=\"#项目命名问题\" class=\"headerlink\" title=\"项目命名问题\"></a>项目命名问题</h3><p><div align=\"center\"><br><img src=\"/hexohelp/1.png\"><br></div><br>我嫌原作者画的圈不够粗，重新在这里强调一下，这个项目的命名一定要是<font color=\"#FF7F50\">你的github账号名</font>.github.io，要不github一定狠狠地把404甩你脸上。</p>\n<p>这个项目名称也是作为你blog建立起来后访问的网址，如果嫌你github名字起的太随意，先改一下自己的github账户名再来建项目。</p>\n<p>Github改账户名在下图这里</p>\n<p><div align=\"center\"><br><img src=\"/hexohelp/2.png\"><br></div></p>\n<p><div align=\"center\"><br><img src=\"/hexohelp/3.png\"><br></div><br><br></p>\n<h3 id=\"在不同电脑上更新博客\"><a href=\"#在不同电脑上更新博客\" class=\"headerlink\" title=\"在不同电脑上更新博客\"></a>在不同电脑上更新博客</h3><p>你需要在公司和家里两台电脑上更新博客，虽然说hexo控制端是在本地工作的的，但是你在公司电脑上新生成了一个文章，hexo d发布了，回家后，一不小心在电脑上hexo d 了一下，家里电脑中并没有你新生成的文章的md文件。结果是blog上内容又还原到你家里电脑中的状态了。<br>惊喜不！<br>其实解决办法很简单，把hexo控制端也放到你的项目里作为一个分支，完成修改时候push下，然后用的时候pull一下就可以了，方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在你项目里创建一个分支：hexo，这时候你的这个项目里就有两个分支了，master放hexo生成的静态网站，hexo放你的hexo控制端代码</span><br><span class=\"line\">把项目hexo分支克隆到你用的几台机器上，切到hexo分支</span><br><span class=\"line\">每次要用hexo控制端时，先pull下最新的commit</span><br><span class=\"line\">删除目录下.deploy_git/（这个是个大坑，有时hexo d会出冲突，这个默认是隐藏的，ubuntu可以用ll指令显示）</span><br><span class=\"line\">开始你的表演（写文章或是其他的。。。）</span><br><span class=\"line\">当决定要结束这台机器上的创作了，依次执行git add .、git commit -m &quot;...&quot;、git push hexo提交控制端变动；</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"theme的选择与使用\"><a href=\"#theme的选择与使用\" class=\"headerlink\" title=\"theme的选择与使用\"></a>theme的选择与使用</h3><p>先附上hexo的主题链接: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<p>选择一个你喜欢的主题，进入对应的github项目中clone这个主题到本地themes文件夹中并分别在hexo的_config.yml和主题的_config.yml中配置相关配置。</p>\n<p>这里的坑是，如果直接将中意的主题git clone到你的themes文件夹中，假如你的hexo控制端文件夹本来就是个git项目，这个项目里的themes文件夹里又嵌套了个git项目，就会导致被嵌套的git仓库的改动，不能被大git仓库检测到。这样最直观的</p>\n<p>针对这种问题，可以直接把主题中的.git/文件删除，或者直接下载项目的压缩包然后在themes文件夹中解压。<br><br></p>\n<h3 id=\"md文件的修改与编写\"><a href=\"#md文件的修改与编写\" class=\"headerlink\" title=\"md文件的修改与编写\"></a>md文件的修改与编写</h3><p>hexo使用markdown来编辑文章，在markdown中，可以用#来标识几级标题。<br>但是在我写这篇文章时，发现###标题###没有被解析，原封不动的被打印出来了，如过出现这种情况，请记得试试在#与标题文字之间加一个空格，这种情况同样适用于_config.yml配置文件的修改中，参数和值之间的空格千万别忘记了（如source_dir: source之间的空格）</p>"},{"title":"武者绘之国芳","date":"2017-05-20T14:57:09.000Z","_content":"<div align=\"center\">{% asset_img 0.jpg%}</div>\n歌川国芳是江户时期与歌川国贞、歌川广重齐名的三大浮世绘画师之一（他们统属于歌川派，并不是兄弟三）。他因为在武士画上的创新而被称为“武者绘之国芳”。\n\n因为他总喜欢画三联画，往往又喜欢浓墨重笔的画些狂歌纵酒的武士、奇奇怪怪的鬼怪，而且三联画的比例拿来做桌面壁纸很好看！所以很喜欢他画的浮世绘。\n\n下面聊聊我最喜欢他画的三幅画：\n<!--more-->\n第一幅画就是封面上那个大骷髅，在日剧《大川端侦探社》里多次出现过。这幅画便是歌川国芳的《相马の古内裹》，画中的骷髅叫做咔嚓骷髅。\n<div align=\"center\">{% asset_img 4.jpg%}</div><div align=\"center\"><font color=#A9A9A9>大川端侦探社</font> </div>\n《相马の古内裹》取材自山东京伝的小说《忠义传》，描绘的是泷夜叉姬操纵巨大骸骨与大宅太郎光圀对战的故事。泷夜叉姬是平将门的妹妹（一说是女儿），传说泷夜叉姬为了替兄报仇，前往鞍马贵船神社祈愿，获得蟾蜍妖术（能夠化身为蟾蜍）替兄报仇的故事。\n\n为了表现山东京伝小说中描述的上百具骸骨战斗的宏大场面，画作者用一具巨大的骸骨给观者造成视觉上的冲击。（小骷髅！合体！）\n整个画面构图大胆，人物形态逼真，是国芳的知名代表作之一。\n\n讲完了画，再讲讲这个咔嚓骷髅。\n\n喀嚓骷髅，在《日本灵异记》中被记载，是由众多战死荒野的和没有得到埋葬的死者们的骸骨和怨念等怨灵聚集起来，变成的巨大的骷髅魔物，它会在白昼隐藏起来，夜间四处游走袭击路人，将人一把抓来，喝干他的血。\n为什么叫做咔嚓骷髅呢？因为它行动时候骨头相撞，发出咔嚓咔嚓的响声。。。\n\n<div align=\"center\">{% asset_img 1.jpeg%}</div><div align=\"center\"><font color=#A9A9A9>为朝营救图</font> </div>\n这幅画名字叫做《为朝营救图》，讲述的平安时代武将源为朝与巨浪搏斗的故事，武士、巨浪、大鱼、天狗构成了一幅惊险生猛的画面，大鱼遨游于巨浪之上营救遭遇险境的源为潮，奇诡浪漫，又是熟悉的国芳味道。\n\n大鱼张开了大嘴，我猜有人一定想要说：“我有一个大胆的想法”。\n大鱼身上葛优躺的那个就是源为朝。这幅画的海浪像极了《神奈川冲浪里》中海浪的画风，也许是那个年代海浪的模板画风吧。\n</br>\n<div align=\"center\">{% asset_img 2.jpg%}</div><div align=\"center\"><font color=#A9A9A9>宫本武藏斩巨鲸</font> </div>\n\n《宫本武藏斩巨鲸》，剑圣宫本武藏骑在巨鲸的背上，巨鲸一脸享受的样子。为什么你们从古代就和鲸鱼过不去呢？突然想到了2015年的一个电影海报，似乎有异曲同工之妙。\n<div align=\"center\">{% asset_img 3.jpeg%}</div><div align=\"center\"><font color=#A9A9A9>海洋深处</font> </div>\n\n这个一辈子画尽了英雄迷梦，神妖精怪的国芳，在44岁时却因为自己的天真付出了代价，他因触犯政府关于浮世绘题材的管控条例被捕入狱，并交了不少罚款。从那以后，那个热烈明朗，浪漫调皮的国芳灵魂似乎被抽离了一大半。进入50年代后， 身体也被疾病纠缠，笔力渐虚，一直到去世的这些年间，他的作品逐步走向不可逆转的沉寂中庸。\n\n也许，对于越单纯专注的人，最沉重的打击并非暴力本身，而是内心笃信趋向的东西被抹杀否定。经历过严刑和羞辱的国芳，这次再也没能找回那个自信热血的“一勇斋国芳”（歌川国芳自号）。\n\n人们因他在武者绘领域的大放异彩而称他为“武者国芳”。肉体会枯朽，激情会退让，晚年的国芳无心恋战。但是真高兴啊，国芳留给后世人最棒的记忆，是他盛年期璨如夏花，放肆纵情的英雄梦。","source":"_posts/ukiyoe.md","raw":"---\ntitle: 武者绘之国芳\ndate: 2017-05-20 22:57:09\ntags: 杂文\ncategories: 日常\n---\n<div align=\"center\">{% asset_img 0.jpg%}</div>\n歌川国芳是江户时期与歌川国贞、歌川广重齐名的三大浮世绘画师之一（他们统属于歌川派，并不是兄弟三）。他因为在武士画上的创新而被称为“武者绘之国芳”。\n\n因为他总喜欢画三联画，往往又喜欢浓墨重笔的画些狂歌纵酒的武士、奇奇怪怪的鬼怪，而且三联画的比例拿来做桌面壁纸很好看！所以很喜欢他画的浮世绘。\n\n下面聊聊我最喜欢他画的三幅画：\n<!--more-->\n第一幅画就是封面上那个大骷髅，在日剧《大川端侦探社》里多次出现过。这幅画便是歌川国芳的《相马の古内裹》，画中的骷髅叫做咔嚓骷髅。\n<div align=\"center\">{% asset_img 4.jpg%}</div><div align=\"center\"><font color=#A9A9A9>大川端侦探社</font> </div>\n《相马の古内裹》取材自山东京伝的小说《忠义传》，描绘的是泷夜叉姬操纵巨大骸骨与大宅太郎光圀对战的故事。泷夜叉姬是平将门的妹妹（一说是女儿），传说泷夜叉姬为了替兄报仇，前往鞍马贵船神社祈愿，获得蟾蜍妖术（能夠化身为蟾蜍）替兄报仇的故事。\n\n为了表现山东京伝小说中描述的上百具骸骨战斗的宏大场面，画作者用一具巨大的骸骨给观者造成视觉上的冲击。（小骷髅！合体！）\n整个画面构图大胆，人物形态逼真，是国芳的知名代表作之一。\n\n讲完了画，再讲讲这个咔嚓骷髅。\n\n喀嚓骷髅，在《日本灵异记》中被记载，是由众多战死荒野的和没有得到埋葬的死者们的骸骨和怨念等怨灵聚集起来，变成的巨大的骷髅魔物，它会在白昼隐藏起来，夜间四处游走袭击路人，将人一把抓来，喝干他的血。\n为什么叫做咔嚓骷髅呢？因为它行动时候骨头相撞，发出咔嚓咔嚓的响声。。。\n\n<div align=\"center\">{% asset_img 1.jpeg%}</div><div align=\"center\"><font color=#A9A9A9>为朝营救图</font> </div>\n这幅画名字叫做《为朝营救图》，讲述的平安时代武将源为朝与巨浪搏斗的故事，武士、巨浪、大鱼、天狗构成了一幅惊险生猛的画面，大鱼遨游于巨浪之上营救遭遇险境的源为潮，奇诡浪漫，又是熟悉的国芳味道。\n\n大鱼张开了大嘴，我猜有人一定想要说：“我有一个大胆的想法”。\n大鱼身上葛优躺的那个就是源为朝。这幅画的海浪像极了《神奈川冲浪里》中海浪的画风，也许是那个年代海浪的模板画风吧。\n</br>\n<div align=\"center\">{% asset_img 2.jpg%}</div><div align=\"center\"><font color=#A9A9A9>宫本武藏斩巨鲸</font> </div>\n\n《宫本武藏斩巨鲸》，剑圣宫本武藏骑在巨鲸的背上，巨鲸一脸享受的样子。为什么你们从古代就和鲸鱼过不去呢？突然想到了2015年的一个电影海报，似乎有异曲同工之妙。\n<div align=\"center\">{% asset_img 3.jpeg%}</div><div align=\"center\"><font color=#A9A9A9>海洋深处</font> </div>\n\n这个一辈子画尽了英雄迷梦，神妖精怪的国芳，在44岁时却因为自己的天真付出了代价，他因触犯政府关于浮世绘题材的管控条例被捕入狱，并交了不少罚款。从那以后，那个热烈明朗，浪漫调皮的国芳灵魂似乎被抽离了一大半。进入50年代后， 身体也被疾病纠缠，笔力渐虚，一直到去世的这些年间，他的作品逐步走向不可逆转的沉寂中庸。\n\n也许，对于越单纯专注的人，最沉重的打击并非暴力本身，而是内心笃信趋向的东西被抹杀否定。经历过严刑和羞辱的国芳，这次再也没能找回那个自信热血的“一勇斋国芳”（歌川国芳自号）。\n\n人们因他在武者绘领域的大放异彩而称他为“武者国芳”。肉体会枯朽，激情会退让，晚年的国芳无心恋战。但是真高兴啊，国芳留给后世人最棒的记忆，是他盛年期璨如夏花，放肆纵情的英雄梦。","slug":"ukiyoe","published":1,"updated":"2019-09-24T07:15:15.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7aii000rkwa9jcr4qwci","content":"<div align=\"center\"><img src=\"/ukiyoe/0.jpg\"></div><br>歌川国芳是江户时期与歌川国贞、歌川广重齐名的三大浮世绘画师之一（他们统属于歌川派，并不是兄弟三）。他因为在武士画上的创新而被称为“武者绘之国芳”。<br><br>因为他总喜欢画三联画，往往又喜欢浓墨重笔的画些狂歌纵酒的武士、奇奇怪怪的鬼怪，而且三联画的比例拿来做桌面壁纸很好看！所以很喜欢他画的浮世绘。<br><br>下面聊聊我最喜欢他画的三幅画：<br><a id=\"more\"></a><br>第一幅画就是封面上那个大骷髅，在日剧《大川端侦探社》里多次出现过。这幅画便是歌川国芳的《相马の古内裹》，画中的骷髅叫做咔嚓骷髅。<br><div align=\"center\"><img src=\"/ukiyoe/4.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">大川端侦探社</font> </div><br>《相马の古内裹》取材自山东京伝的小说《忠义传》，描绘的是泷夜叉姬操纵巨大骸骨与大宅太郎光圀对战的故事。泷夜叉姬是平将门的妹妹（一说是女儿），传说泷夜叉姬为了替兄报仇，前往鞍马贵船神社祈愿，获得蟾蜍妖术（能夠化身为蟾蜍）替兄报仇的故事。<br><br>为了表现山东京伝小说中描述的上百具骸骨战斗的宏大场面，画作者用一具巨大的骸骨给观者造成视觉上的冲击。（小骷髅！合体！）<br>整个画面构图大胆，人物形态逼真，是国芳的知名代表作之一。<br><br>讲完了画，再讲讲这个咔嚓骷髅。<br><br>喀嚓骷髅，在《日本灵异记》中被记载，是由众多战死荒野的和没有得到埋葬的死者们的骸骨和怨念等怨灵聚集起来，变成的巨大的骷髅魔物，它会在白昼隐藏起来，夜间四处游走袭击路人，将人一把抓来，喝干他的血。<br>为什么叫做咔嚓骷髅呢？因为它行动时候骨头相撞，发出咔嚓咔嚓的响声。。。<br><br><div align=\"center\"><img src=\"/ukiyoe/1.jpeg\"></div><div align=\"center\"><font color=\"#A9A9A9\">为朝营救图</font> </div><br>这幅画名字叫做《为朝营救图》，讲述的平安时代武将源为朝与巨浪搏斗的故事，武士、巨浪、大鱼、天狗构成了一幅惊险生猛的画面，大鱼遨游于巨浪之上营救遭遇险境的源为潮，奇诡浪漫，又是熟悉的国芳味道。<br><br>大鱼张开了大嘴，我猜有人一定想要说：“我有一个大胆的想法”。<br>大鱼身上葛优躺的那个就是源为朝。这幅画的海浪像极了《神奈川冲浪里》中海浪的画风，也许是那个年代海浪的模板画风吧。<br><br><br><div align=\"center\"><img src=\"/ukiyoe/2.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">宫本武藏斩巨鲸</font> </div>\n\n<p>《宫本武藏斩巨鲸》，剑圣宫本武藏骑在巨鲸的背上，巨鲸一脸享受的样子。为什么你们从古代就和鲸鱼过不去呢？突然想到了2015年的一个电影海报，似乎有异曲同工之妙。</p>\n<div align=\"center\"><img src=\"/ukiyoe/3.jpeg\"></div><div align=\"center\"><font color=\"#A9A9A9\">海洋深处</font> </div>\n\n<p>这个一辈子画尽了英雄迷梦，神妖精怪的国芳，在44岁时却因为自己的天真付出了代价，他因触犯政府关于浮世绘题材的管控条例被捕入狱，并交了不少罚款。从那以后，那个热烈明朗，浪漫调皮的国芳灵魂似乎被抽离了一大半。进入50年代后， 身体也被疾病纠缠，笔力渐虚，一直到去世的这些年间，他的作品逐步走向不可逆转的沉寂中庸。</p>\n<p>也许，对于越单纯专注的人，最沉重的打击并非暴力本身，而是内心笃信趋向的东西被抹杀否定。经历过严刑和羞辱的国芳，这次再也没能找回那个自信热血的“一勇斋国芳”（歌川国芳自号）。</p>\n<p>人们因他在武者绘领域的大放异彩而称他为“武者国芳”。肉体会枯朽，激情会退让，晚年的国芳无心恋战。但是真高兴啊，国芳留给后世人最棒的记忆，是他盛年期璨如夏花，放肆纵情的英雄梦。</p>\n","site":{"data":{}},"excerpt":"<div align=\"center\"><img src=\"/ukiyoe/0.jpg\"></div><br>歌川国芳是江户时期与歌川国贞、歌川广重齐名的三大浮世绘画师之一（他们统属于歌川派，并不是兄弟三）。他因为在武士画上的创新而被称为“武者绘之国芳”。<br><br>因为他总喜欢画三联画，往往又喜欢浓墨重笔的画些狂歌纵酒的武士、奇奇怪怪的鬼怪，而且三联画的比例拿来做桌面壁纸很好看！所以很喜欢他画的浮世绘。<br><br>下面聊聊我最喜欢他画的三幅画：<br>","more":"<br>第一幅画就是封面上那个大骷髅，在日剧《大川端侦探社》里多次出现过。这幅画便是歌川国芳的《相马の古内裹》，画中的骷髅叫做咔嚓骷髅。<br><div align=\"center\"><img src=\"/ukiyoe/4.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">大川端侦探社</font> </div><br>《相马の古内裹》取材自山东京伝的小说《忠义传》，描绘的是泷夜叉姬操纵巨大骸骨与大宅太郎光圀对战的故事。泷夜叉姬是平将门的妹妹（一说是女儿），传说泷夜叉姬为了替兄报仇，前往鞍马贵船神社祈愿，获得蟾蜍妖术（能夠化身为蟾蜍）替兄报仇的故事。<br><br>为了表现山东京伝小说中描述的上百具骸骨战斗的宏大场面，画作者用一具巨大的骸骨给观者造成视觉上的冲击。（小骷髅！合体！）<br>整个画面构图大胆，人物形态逼真，是国芳的知名代表作之一。<br><br>讲完了画，再讲讲这个咔嚓骷髅。<br><br>喀嚓骷髅，在《日本灵异记》中被记载，是由众多战死荒野的和没有得到埋葬的死者们的骸骨和怨念等怨灵聚集起来，变成的巨大的骷髅魔物，它会在白昼隐藏起来，夜间四处游走袭击路人，将人一把抓来，喝干他的血。<br>为什么叫做咔嚓骷髅呢？因为它行动时候骨头相撞，发出咔嚓咔嚓的响声。。。<br><br><div align=\"center\"><img src=\"/ukiyoe/1.jpeg\"></div><div align=\"center\"><font color=\"#A9A9A9\">为朝营救图</font> </div><br>这幅画名字叫做《为朝营救图》，讲述的平安时代武将源为朝与巨浪搏斗的故事，武士、巨浪、大鱼、天狗构成了一幅惊险生猛的画面，大鱼遨游于巨浪之上营救遭遇险境的源为潮，奇诡浪漫，又是熟悉的国芳味道。<br><br>大鱼张开了大嘴，我猜有人一定想要说：“我有一个大胆的想法”。<br>大鱼身上葛优躺的那个就是源为朝。这幅画的海浪像极了《神奈川冲浪里》中海浪的画风，也许是那个年代海浪的模板画风吧。<br><br><br><div align=\"center\"><img src=\"/ukiyoe/2.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">宫本武藏斩巨鲸</font> </div>\n\n<p>《宫本武藏斩巨鲸》，剑圣宫本武藏骑在巨鲸的背上，巨鲸一脸享受的样子。为什么你们从古代就和鲸鱼过不去呢？突然想到了2015年的一个电影海报，似乎有异曲同工之妙。</p>\n<div align=\"center\"><img src=\"/ukiyoe/3.jpeg\"></div><div align=\"center\"><font color=\"#A9A9A9\">海洋深处</font> </div>\n\n<p>这个一辈子画尽了英雄迷梦，神妖精怪的国芳，在44岁时却因为自己的天真付出了代价，他因触犯政府关于浮世绘题材的管控条例被捕入狱，并交了不少罚款。从那以后，那个热烈明朗，浪漫调皮的国芳灵魂似乎被抽离了一大半。进入50年代后， 身体也被疾病纠缠，笔力渐虚，一直到去世的这些年间，他的作品逐步走向不可逆转的沉寂中庸。</p>\n<p>也许，对于越单纯专注的人，最沉重的打击并非暴力本身，而是内心笃信趋向的东西被抹杀否定。经历过严刑和羞辱的国芳，这次再也没能找回那个自信热血的“一勇斋国芳”（歌川国芳自号）。</p>\n<p>人们因他在武者绘领域的大放异彩而称他为“武者国芳”。肉体会枯朽，激情会退让，晚年的国芳无心恋战。但是真高兴啊，国芳留给后世人最棒的记忆，是他盛年期璨如夏花，放肆纵情的英雄梦。</p>"},{"title":"预言与狂想——后工业洛可可风格雕塑","date":"2017-05-20T01:06:49.000Z","_content":"<div align=\"center\">{% asset_img 0.jpg%}</div>\n如果你看过《黑帆》(Black Sails)这部美剧，一定会被其片头曲所震撼：沉闷的的光怪陆离的怪诞配乐；黑色的金属，白色的理石与昏暗的光线的碰撞；生者与死者的厮杀；在咚咚的鼓点声中压抑与振奋的奇怪体验。  \n我很喜欢片头曲中雕塑的风格，却一直不知道它们是什么，直到我偶然发现了雕塑家Kris Kuksi这个人。  \n\n这里收集了一些他的作品图片，快来一起体验下这些画风怪诞的艺术品吧。\n<!--more-->\n\n<div align=\"center\">{% asset_img 4.jpg%}<font color=#A9A9A9>安宁</font> </div>\nKris Kuksi 1973年3月2日出生在密苏里斯普林菲尔德， 他的母亲是一位蓝领.二个哥哥、空旷环境、稀稀落落的树和醺酒的继父，为他的想像力和个性铺平了道路。他异常迷恋艺术，奇异风格对他来讲是美丽的。  \n童年消极的生活环境使他在艺术取得了突破性进展，同时也使他厌恶美国生活和流行文化，他决定在“旧世界”里寻找着自己的东西！他希望他的艺术暴露人的虚伪，揭幕一个新的水平视角。\n<div align=\"center\">{% asset_img 1.jpg%}<font color=#A9A9A9>造访</font> </div>\nKris Kuksi创作的灵感来自工业世界里那些复杂的机器、管子、网络、电报、提炼厂等等；  \n他以巴洛克和洛可可式的流动的优美，并且融入了一点古怪和恐怖元素，创作了这些令人吃惊和独特的雕塑作品。 \n<div align=\"center\">{% asset_img 2.jpg%}<font color=#A9A9A9>泰古</font> </div>\n雕塑家Kris Kuksi的作品中，往往充斥着些深邃噩梦般的元素，让人想到那些阴谋的主使。不过这仅仅是外表而已，Kris Kuksi的作品中渗透出的对于死亡和无望境地冷嘲热讽反而让人们感到他像是一个将火种带回人间的普罗米修斯的对立面，一个将恐怖带到人间英雄。他的作品并没有血腥的元素，而是一种弥漫着一种宗教感般沉重的气息。然而，一个好作品就应该是这样的。\n<div align=\"center\">{% asset_img 3.jpg%}<font color=#A9A9A9>银行战车</font> </div>\n在雕塑界多年来具有突破性的作品少而又少，看到他的作品可能令人想到大师Hieronymus Bosch的荒诞不经, Lovecraft的暗黑狂想, 以及H.R.GIGER的淫邪之美。\n<div align=\"center\">{% asset_img 5.jpg%}</div><div align=\"center\"><font color=#A9A9A9>洲际导弹</font> </div>\n他的雕塑作品融合东方西方的古典雕塑形式，但是将新时代的设计语言和观念与古典融合，由此我们看到的是一个具有古典形式美的外表下的荒诞现实。这种形式和内容之间的矛盾构成他艺术中的暗黑特点。  \n<div align=\"center\">{% asset_img 11.jpg%}</div><div align=\"center\"><font color=#A9A9A9>罗马帝王</div></font> \n他的作品很多表现的是死亡，阴暗，破坏，邪恶与宗教般的庄严，严谨相结合，他起家于绘画，平平淡淡，不知道那根神经东起了最繁杂的古典雕塑的形式，那些卷曲的花叶和手持机枪的战神，多到让人眼花缭乱的细节都充满工匠气味，但是就是这样的繁杂瞬间超越了现代雕塑的冷漠和枯燥\n<div align=\"center\">{% asset_img 8.jpg%}</div><div align=\"center\"><font color=#A9A9A9>手持机枪的战神</div></font> \n他出生于1973年，在密苏里的春田镇，但是他在堪萨斯长大，他自小孤僻，堪萨斯开阔而孤独的的乡间生活给了他足够的相像土壤，他喜欢画画，成年以后立刻发现他的艺术趣味和美国流行艺术和生活格格不入，他感到自己完全属于一个旧世界，这个旧世界不断被新时代的战争，破坏和暴力侵占蚕食，就像是拜伦所说：当斗兽场倒塌，罗马就会崩溃，当罗马崩溃，世界就崩溃了。\n<div align=\"center\">{% asset_img 7.jpg%}<font color=#A9A9A9>壁饰</font> </div>\nKuksi的斗兽场已经在他童年的时候被继父的酒瓶子砸倒了，这种塌陷一直就没有停顿。从2004年开始他创作《寄生和宿主》系列作品，从那时候开始他找到了自己的话语，在他看来今天的世界被贪婪的物质主义驱动，在这个邪恶而快速变换花样的世界中，选择传统而费时的注重细节的雕塑是如此需要勇气和耐心。\n<div align=\"center\">{% asset_img 6.jpg%}<font color=#A9A9A9>将鼠标光标移离缩略图窗口。</font> </div>\n“今天的世界对于需要长时间制作的艺术是不合适的，想和做都需要时间，周围的世界变化迅速这都是挑战，我只是不断适应这个时间，不论它对于艺术家来说是多么冷酷，艺术市场既有好处也有坏处，艺术的价值和以前的世纪比已经很廉价了。”他说道。\n<div align=\"center\">{% asset_img 10.jpg%}</div><div align=\"center\"><font color=#A9A9A9>对贝多芬的致敬</div></font> \n他说：“在艺术是什么或是伟大的艺术应该怎样的问题上，人们认知相差甚远，因此作为艺术家的我，我必须诚实面对自己的品味，并顶住压力去探索过去和未来的艺术趋势”\n","source":"_posts/kris.md","raw":"---\ntitle: 预言与狂想——后工业洛可可风格雕塑\ndate: 2017-05-20 09:06:49\ntags: 杂文\ncategories: 日常\n---\n<div align=\"center\">{% asset_img 0.jpg%}</div>\n如果你看过《黑帆》(Black Sails)这部美剧，一定会被其片头曲所震撼：沉闷的的光怪陆离的怪诞配乐；黑色的金属，白色的理石与昏暗的光线的碰撞；生者与死者的厮杀；在咚咚的鼓点声中压抑与振奋的奇怪体验。  \n我很喜欢片头曲中雕塑的风格，却一直不知道它们是什么，直到我偶然发现了雕塑家Kris Kuksi这个人。  \n\n这里收集了一些他的作品图片，快来一起体验下这些画风怪诞的艺术品吧。\n<!--more-->\n\n<div align=\"center\">{% asset_img 4.jpg%}<font color=#A9A9A9>安宁</font> </div>\nKris Kuksi 1973年3月2日出生在密苏里斯普林菲尔德， 他的母亲是一位蓝领.二个哥哥、空旷环境、稀稀落落的树和醺酒的继父，为他的想像力和个性铺平了道路。他异常迷恋艺术，奇异风格对他来讲是美丽的。  \n童年消极的生活环境使他在艺术取得了突破性进展，同时也使他厌恶美国生活和流行文化，他决定在“旧世界”里寻找着自己的东西！他希望他的艺术暴露人的虚伪，揭幕一个新的水平视角。\n<div align=\"center\">{% asset_img 1.jpg%}<font color=#A9A9A9>造访</font> </div>\nKris Kuksi创作的灵感来自工业世界里那些复杂的机器、管子、网络、电报、提炼厂等等；  \n他以巴洛克和洛可可式的流动的优美，并且融入了一点古怪和恐怖元素，创作了这些令人吃惊和独特的雕塑作品。 \n<div align=\"center\">{% asset_img 2.jpg%}<font color=#A9A9A9>泰古</font> </div>\n雕塑家Kris Kuksi的作品中，往往充斥着些深邃噩梦般的元素，让人想到那些阴谋的主使。不过这仅仅是外表而已，Kris Kuksi的作品中渗透出的对于死亡和无望境地冷嘲热讽反而让人们感到他像是一个将火种带回人间的普罗米修斯的对立面，一个将恐怖带到人间英雄。他的作品并没有血腥的元素，而是一种弥漫着一种宗教感般沉重的气息。然而，一个好作品就应该是这样的。\n<div align=\"center\">{% asset_img 3.jpg%}<font color=#A9A9A9>银行战车</font> </div>\n在雕塑界多年来具有突破性的作品少而又少，看到他的作品可能令人想到大师Hieronymus Bosch的荒诞不经, Lovecraft的暗黑狂想, 以及H.R.GIGER的淫邪之美。\n<div align=\"center\">{% asset_img 5.jpg%}</div><div align=\"center\"><font color=#A9A9A9>洲际导弹</font> </div>\n他的雕塑作品融合东方西方的古典雕塑形式，但是将新时代的设计语言和观念与古典融合，由此我们看到的是一个具有古典形式美的外表下的荒诞现实。这种形式和内容之间的矛盾构成他艺术中的暗黑特点。  \n<div align=\"center\">{% asset_img 11.jpg%}</div><div align=\"center\"><font color=#A9A9A9>罗马帝王</div></font> \n他的作品很多表现的是死亡，阴暗，破坏，邪恶与宗教般的庄严，严谨相结合，他起家于绘画，平平淡淡，不知道那根神经东起了最繁杂的古典雕塑的形式，那些卷曲的花叶和手持机枪的战神，多到让人眼花缭乱的细节都充满工匠气味，但是就是这样的繁杂瞬间超越了现代雕塑的冷漠和枯燥\n<div align=\"center\">{% asset_img 8.jpg%}</div><div align=\"center\"><font color=#A9A9A9>手持机枪的战神</div></font> \n他出生于1973年，在密苏里的春田镇，但是他在堪萨斯长大，他自小孤僻，堪萨斯开阔而孤独的的乡间生活给了他足够的相像土壤，他喜欢画画，成年以后立刻发现他的艺术趣味和美国流行艺术和生活格格不入，他感到自己完全属于一个旧世界，这个旧世界不断被新时代的战争，破坏和暴力侵占蚕食，就像是拜伦所说：当斗兽场倒塌，罗马就会崩溃，当罗马崩溃，世界就崩溃了。\n<div align=\"center\">{% asset_img 7.jpg%}<font color=#A9A9A9>壁饰</font> </div>\nKuksi的斗兽场已经在他童年的时候被继父的酒瓶子砸倒了，这种塌陷一直就没有停顿。从2004年开始他创作《寄生和宿主》系列作品，从那时候开始他找到了自己的话语，在他看来今天的世界被贪婪的物质主义驱动，在这个邪恶而快速变换花样的世界中，选择传统而费时的注重细节的雕塑是如此需要勇气和耐心。\n<div align=\"center\">{% asset_img 6.jpg%}<font color=#A9A9A9>将鼠标光标移离缩略图窗口。</font> </div>\n“今天的世界对于需要长时间制作的艺术是不合适的，想和做都需要时间，周围的世界变化迅速这都是挑战，我只是不断适应这个时间，不论它对于艺术家来说是多么冷酷，艺术市场既有好处也有坏处，艺术的价值和以前的世纪比已经很廉价了。”他说道。\n<div align=\"center\">{% asset_img 10.jpg%}</div><div align=\"center\"><font color=#A9A9A9>对贝多芬的致敬</div></font> \n他说：“在艺术是什么或是伟大的艺术应该怎样的问题上，人们认知相差甚远，因此作为艺术家的我，我必须诚实面对自己的品味，并顶住压力去探索过去和未来的艺术趋势”\n","slug":"kris","published":1,"updated":"2019-09-24T07:15:14.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0xq7aik000tkwa9ive4gcok","content":"<p><div align=\"center\"><img src=\"/kris/0.jpg\"></div><br>如果你看过《黑帆》(Black Sails)这部美剧，一定会被其片头曲所震撼：沉闷的的光怪陆离的怪诞配乐；黑色的金属，白色的理石与昏暗的光线的碰撞；生者与死者的厮杀；在咚咚的鼓点声中压抑与振奋的奇怪体验。<br>我很喜欢片头曲中雕塑的风格，却一直不知道它们是什么，直到我偶然发现了雕塑家Kris Kuksi这个人。  </p>\n<p>这里收集了一些他的作品图片，快来一起体验下这些画风怪诞的艺术品吧。<br><a id=\"more\"></a></p>\n<p><div align=\"center\"><img src=\"/kris/4.jpg\"><font color=\"#A9A9A9\">安宁</font> </div><br>Kris Kuksi 1973年3月2日出生在密苏里斯普林菲尔德， 他的母亲是一位蓝领.二个哥哥、空旷环境、稀稀落落的树和醺酒的继父，为他的想像力和个性铺平了道路。他异常迷恋艺术，奇异风格对他来讲是美丽的。<br>童年消极的生活环境使他在艺术取得了突破性进展，同时也使他厌恶美国生活和流行文化，他决定在“旧世界”里寻找着自己的东西！他希望他的艺术暴露人的虚伪，揭幕一个新的水平视角。</p>\n<p><div align=\"center\"><img src=\"/kris/1.jpg\"><font color=\"#A9A9A9\">造访</font> </div><br>Kris Kuksi创作的灵感来自工业世界里那些复杂的机器、管子、网络、电报、提炼厂等等；<br>他以巴洛克和洛可可式的流动的优美，并且融入了一点古怪和恐怖元素，创作了这些令人吃惊和独特的雕塑作品。 </p>\n<p><div align=\"center\"><img src=\"/kris/2.jpg\"><font color=\"#A9A9A9\">泰古</font> </div><br>雕塑家Kris Kuksi的作品中，往往充斥着些深邃噩梦般的元素，让人想到那些阴谋的主使。不过这仅仅是外表而已，Kris Kuksi的作品中渗透出的对于死亡和无望境地冷嘲热讽反而让人们感到他像是一个将火种带回人间的普罗米修斯的对立面，一个将恐怖带到人间英雄。他的作品并没有血腥的元素，而是一种弥漫着一种宗教感般沉重的气息。然而，一个好作品就应该是这样的。</p>\n<p><div align=\"center\"><img src=\"/kris/3.jpg\"><font color=\"#A9A9A9\">银行战车</font> </div><br>在雕塑界多年来具有突破性的作品少而又少，看到他的作品可能令人想到大师Hieronymus Bosch的荒诞不经, Lovecraft的暗黑狂想, 以及H.R.GIGER的淫邪之美。</p>\n<p><div align=\"center\"><img src=\"/kris/5.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">洲际导弹</font> </div><br>他的雕塑作品融合东方西方的古典雕塑形式，但是将新时代的设计语言和观念与古典融合，由此我们看到的是一个具有古典形式美的外表下的荒诞现实。这种形式和内容之间的矛盾构成他艺术中的暗黑特点。  </p>\n<p><div align=\"center\"><img src=\"/kris/11.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">罗马帝王</font></div><br>他的作品很多表现的是死亡，阴暗，破坏，邪恶与宗教般的庄严，严谨相结合，他起家于绘画，平平淡淡，不知道那根神经东起了最繁杂的古典雕塑的形式，那些卷曲的花叶和手持机枪的战神，多到让人眼花缭乱的细节都充满工匠气味，但是就是这样的繁杂瞬间超越了现代雕塑的冷漠和枯燥</p>\n<p><div align=\"center\"><img src=\"/kris/8.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">手持机枪的战神</font></div><br>他出生于1973年，在密苏里的春田镇，但是他在堪萨斯长大，他自小孤僻，堪萨斯开阔而孤独的的乡间生活给了他足够的相像土壤，他喜欢画画，成年以后立刻发现他的艺术趣味和美国流行艺术和生活格格不入，他感到自己完全属于一个旧世界，这个旧世界不断被新时代的战争，破坏和暴力侵占蚕食，就像是拜伦所说：当斗兽场倒塌，罗马就会崩溃，当罗马崩溃，世界就崩溃了。</p>\n<p><div align=\"center\"><img src=\"/kris/7.jpg\"><font color=\"#A9A9A9\">壁饰</font> </div><br>Kuksi的斗兽场已经在他童年的时候被继父的酒瓶子砸倒了，这种塌陷一直就没有停顿。从2004年开始他创作《寄生和宿主》系列作品，从那时候开始他找到了自己的话语，在他看来今天的世界被贪婪的物质主义驱动，在这个邪恶而快速变换花样的世界中，选择传统而费时的注重细节的雕塑是如此需要勇气和耐心。</p>\n<p><div align=\"center\"><img src=\"/kris/6.jpg\"><font color=\"#A9A9A9\">将鼠标光标移离缩略图窗口。</font> </div><br>“今天的世界对于需要长时间制作的艺术是不合适的，想和做都需要时间，周围的世界变化迅速这都是挑战，我只是不断适应这个时间，不论它对于艺术家来说是多么冷酷，艺术市场既有好处也有坏处，艺术的价值和以前的世纪比已经很廉价了。”他说道。</p>\n<p><div align=\"center\"><img src=\"/kris/10.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">对贝多芬的致敬</font></div><br>他说：“在艺术是什么或是伟大的艺术应该怎样的问题上，人们认知相差甚远，因此作为艺术家的我，我必须诚实面对自己的品味，并顶住压力去探索过去和未来的艺术趋势”</p>\n","site":{"data":{}},"excerpt":"<p><div align=\"center\"><img src=\"/kris/0.jpg\"></div><br>如果你看过《黑帆》(Black Sails)这部美剧，一定会被其片头曲所震撼：沉闷的的光怪陆离的怪诞配乐；黑色的金属，白色的理石与昏暗的光线的碰撞；生者与死者的厮杀；在咚咚的鼓点声中压抑与振奋的奇怪体验。<br>我很喜欢片头曲中雕塑的风格，却一直不知道它们是什么，直到我偶然发现了雕塑家Kris Kuksi这个人。  </p>\n<p>这里收集了一些他的作品图片，快来一起体验下这些画风怪诞的艺术品吧。<br>","more":"</p>\n<p><div align=\"center\"><img src=\"/kris/4.jpg\"><font color=\"#A9A9A9\">安宁</font> </div><br>Kris Kuksi 1973年3月2日出生在密苏里斯普林菲尔德， 他的母亲是一位蓝领.二个哥哥、空旷环境、稀稀落落的树和醺酒的继父，为他的想像力和个性铺平了道路。他异常迷恋艺术，奇异风格对他来讲是美丽的。<br>童年消极的生活环境使他在艺术取得了突破性进展，同时也使他厌恶美国生活和流行文化，他决定在“旧世界”里寻找着自己的东西！他希望他的艺术暴露人的虚伪，揭幕一个新的水平视角。</p>\n<p><div align=\"center\"><img src=\"/kris/1.jpg\"><font color=\"#A9A9A9\">造访</font> </div><br>Kris Kuksi创作的灵感来自工业世界里那些复杂的机器、管子、网络、电报、提炼厂等等；<br>他以巴洛克和洛可可式的流动的优美，并且融入了一点古怪和恐怖元素，创作了这些令人吃惊和独特的雕塑作品。 </p>\n<p><div align=\"center\"><img src=\"/kris/2.jpg\"><font color=\"#A9A9A9\">泰古</font> </div><br>雕塑家Kris Kuksi的作品中，往往充斥着些深邃噩梦般的元素，让人想到那些阴谋的主使。不过这仅仅是外表而已，Kris Kuksi的作品中渗透出的对于死亡和无望境地冷嘲热讽反而让人们感到他像是一个将火种带回人间的普罗米修斯的对立面，一个将恐怖带到人间英雄。他的作品并没有血腥的元素，而是一种弥漫着一种宗教感般沉重的气息。然而，一个好作品就应该是这样的。</p>\n<p><div align=\"center\"><img src=\"/kris/3.jpg\"><font color=\"#A9A9A9\">银行战车</font> </div><br>在雕塑界多年来具有突破性的作品少而又少，看到他的作品可能令人想到大师Hieronymus Bosch的荒诞不经, Lovecraft的暗黑狂想, 以及H.R.GIGER的淫邪之美。</p>\n<p><div align=\"center\"><img src=\"/kris/5.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">洲际导弹</font> </div><br>他的雕塑作品融合东方西方的古典雕塑形式，但是将新时代的设计语言和观念与古典融合，由此我们看到的是一个具有古典形式美的外表下的荒诞现实。这种形式和内容之间的矛盾构成他艺术中的暗黑特点。  </p>\n<p><div align=\"center\"><img src=\"/kris/11.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">罗马帝王</font></div><br>他的作品很多表现的是死亡，阴暗，破坏，邪恶与宗教般的庄严，严谨相结合，他起家于绘画，平平淡淡，不知道那根神经东起了最繁杂的古典雕塑的形式，那些卷曲的花叶和手持机枪的战神，多到让人眼花缭乱的细节都充满工匠气味，但是就是这样的繁杂瞬间超越了现代雕塑的冷漠和枯燥</p>\n<p><div align=\"center\"><img src=\"/kris/8.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">手持机枪的战神</font></div><br>他出生于1973年，在密苏里的春田镇，但是他在堪萨斯长大，他自小孤僻，堪萨斯开阔而孤独的的乡间生活给了他足够的相像土壤，他喜欢画画，成年以后立刻发现他的艺术趣味和美国流行艺术和生活格格不入，他感到自己完全属于一个旧世界，这个旧世界不断被新时代的战争，破坏和暴力侵占蚕食，就像是拜伦所说：当斗兽场倒塌，罗马就会崩溃，当罗马崩溃，世界就崩溃了。</p>\n<p><div align=\"center\"><img src=\"/kris/7.jpg\"><font color=\"#A9A9A9\">壁饰</font> </div><br>Kuksi的斗兽场已经在他童年的时候被继父的酒瓶子砸倒了，这种塌陷一直就没有停顿。从2004年开始他创作《寄生和宿主》系列作品，从那时候开始他找到了自己的话语，在他看来今天的世界被贪婪的物质主义驱动，在这个邪恶而快速变换花样的世界中，选择传统而费时的注重细节的雕塑是如此需要勇气和耐心。</p>\n<p><div align=\"center\"><img src=\"/kris/6.jpg\"><font color=\"#A9A9A9\">将鼠标光标移离缩略图窗口。</font> </div><br>“今天的世界对于需要长时间制作的艺术是不合适的，想和做都需要时间，周围的世界变化迅速这都是挑战，我只是不断适应这个时间，不论它对于艺术家来说是多么冷酷，艺术市场既有好处也有坏处，艺术的价值和以前的世纪比已经很廉价了。”他说道。</p>\n<p><div align=\"center\"><img src=\"/kris/10.jpg\"></div><div align=\"center\"><font color=\"#A9A9A9\">对贝多芬的致敬</font></div><br>他说：“在艺术是什么或是伟大的艺术应该怎样的问题上，人们认知相差甚远，因此作为艺术家的我，我必须诚实面对自己的品味，并顶住压力去探索过去和未来的艺术趋势”</p>"}],"PostAsset":[{"_id":"source/_posts/diango/3.jpg","slug":"3.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","modified":1,"renderable":0},{"_id":"source/_posts/ukiyoe/0.jpg","slug":"0.jpg","post":"ck0xq7aii000rkwa9jcr4qwci","modified":1,"renderable":0},{"_id":"source/_posts/kris/4.jpg","slug":"4.jpg","post":"ck0xq7aik000tkwa9ive4gcok","modified":1,"renderable":0},{"_id":"source/_posts/Hello-World-0/helloworld.jpeg","post":"ck0xq7ag70002kwa948lyytw0","slug":"helloworld.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/WordPress-Social-Warfare-Rce/1.png","post":"ck0xq7agi0003kwa9al921v1x","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/hexohelp/0.jpeg","post":"ck0xq7agu0008kwa9rrgxh6w1","slug":"0.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/hexohelp/1.png","slug":"1.png","post":"ck0xq7agu0008kwa9rrgxh6w1","modified":1,"renderable":0},{"_id":"source/_posts/hexohelp/2.png","post":"ck0xq7agu0008kwa9rrgxh6w1","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/hexohelp/3.png","post":"ck0xq7agu0008kwa9rrgxh6w1","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/diango/0.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"0.jpg","modified":1,"renderable":1},{"_id":"source/_posts/diango/1.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/diango/2.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/diango/4.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/diango/5.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/diango/6.jpg","post":"ck0xq7ags0007kwa9lwwm7g8g","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/0.png","post":"ck0xq7agr0006kwa92novnbqu","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/1.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/2.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/3.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/4.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/5.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/6.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/7.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/8.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Preview-a-Window-Before-You-Open-It/9.jpg","post":"ck0xq7agr0006kwa92novnbqu","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/1.jpg","slug":"1.jpg","post":"ck0xq7aik000tkwa9ive4gcok","modified":1,"renderable":0},{"_id":"source/_posts/kris/9.jpg","slug":"9.jpg","post":"ck0xq7aik000tkwa9ive4gcok","modified":1,"renderable":0},{"_id":"source/_posts/ukiyoe/1.jpeg","post":"ck0xq7aii000rkwa9jcr4qwci","slug":"1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/ukiyoe/2.jpg","post":"ck0xq7aii000rkwa9jcr4qwci","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ukiyoe/3.jpeg","post":"ck0xq7aii000rkwa9jcr4qwci","slug":"3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/ukiyoe/4.jpg","post":"ck0xq7aii000rkwa9jcr4qwci","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/0.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"0.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/10.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/11.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/2.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/3.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/5.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kris/6.jpg","slug":"6.jpg","post":"ck0xq7aik000tkwa9ive4gcok","modified":1,"renderable":0},{"_id":"source/_posts/kris/7.jpg","slug":"7.jpg","post":"ck0xq7aik000tkwa9ive4gcok","modified":1,"renderable":0},{"_id":"source/_posts/kris/8.jpg","post":"ck0xq7aik000tkwa9ive4gcok","slug":"8.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck0xq7ag70002kwa948lyytw0","category_id":"ck0xq7agm0004kwa96msgv090","_id":"ck0xq7agy000ckwa9bxnnu6h0"},{"post_id":"ck0xq7agi0003kwa9al921v1x","category_id":"ck0xq7agv0009kwa99fe3uvvq","_id":"ck0xq7ah9000hkwa9zyhmr9q4"},{"post_id":"ck0xq7agr0006kwa92novnbqu","category_id":"ck0xq7agv0009kwa99fe3uvvq","_id":"ck0xq7ahy000lkwa91xjvffzh"},{"post_id":"ck0xq7ags0007kwa9lwwm7g8g","category_id":"ck0xq7agv0009kwa99fe3uvvq","_id":"ck0xq7ai4000okwa9gdf2z7aq"},{"post_id":"ck0xq7agu0008kwa9rrgxh6w1","category_id":"ck0xq7agv0009kwa99fe3uvvq","_id":"ck0xq7ai6000qkwa99fajldx8"},{"post_id":"ck0xq7aii000rkwa9jcr4qwci","category_id":"ck0xq7agm0004kwa96msgv090","_id":"ck0xq7ain000wkwa97qkk4v4u"},{"post_id":"ck0xq7aik000tkwa9ive4gcok","category_id":"ck0xq7agm0004kwa96msgv090","_id":"ck0xq7aio000xkwa9t2ycirak"}],"PostTag":[{"post_id":"ck0xq7ag70002kwa948lyytw0","tag_id":"ck0xq7agq0005kwa9eonnjhjw","_id":"ck0xq7agx000bkwa9yzpp3lj4"},{"post_id":"ck0xq7agi0003kwa9al921v1x","tag_id":"ck0xq7agw000akwa95ww76but","_id":"ck0xq7ah7000fkwa95wuy11ep"},{"post_id":"ck0xq7agr0006kwa92novnbqu","tag_id":"ck0xq7agz000ekwa9es41iwzs","_id":"ck0xq7ahd000jkwa9zv0hossc"},{"post_id":"ck0xq7ags0007kwa9lwwm7g8g","tag_id":"ck0xq7agw000akwa95ww76but","_id":"ck0xq7ai1000nkwa9v53cufrm"},{"post_id":"ck0xq7agu0008kwa9rrgxh6w1","tag_id":"ck0xq7ai0000mkwa95po4fxoh","_id":"ck0xq7ai5000pkwa9qu2klgib"},{"post_id":"ck0xq7aii000rkwa9jcr4qwci","tag_id":"ck0xq7agq0005kwa9eonnjhjw","_id":"ck0xq7ail000ukwa9mgxyyfk4"},{"post_id":"ck0xq7aik000tkwa9ive4gcok","tag_id":"ck0xq7agq0005kwa9eonnjhjw","_id":"ck0xq7ain000vkwa9qyfwm73r"}],"Tag":[{"name":"杂文","_id":"ck0xq7agq0005kwa9eonnjhjw"},{"name":"web漏洞分析","_id":"ck0xq7agw000akwa95ww76but"},{"name":"wikiHow","_id":"ck0xq7agz000ekwa9es41iwzs"},{"name":"技术分享","_id":"ck0xq7ai0000mkwa95po4fxoh"}]}}